<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Basics on Life Beyond Rails</title>
    <link>http://life.beyondrails.com/categories/basics/index.xml</link>
    <description>Recent content in Basics on Life Beyond Rails</description>
    <generator>Hugo -- gohugo.io</generator>
    <atom:link href="http://life.beyondrails.com/categories/basics/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Ruby and Blocks</title>
      <link>http://life.beyondrails.com/blog/2014/03/04/ruby-and-blocks/</link>
      <pubDate>Tue, 04 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://life.beyondrails.com/blog/2014/03/04/ruby-and-blocks/</guid>
      <description>&lt;p&gt;One of the most often used and ironically least understood concepts in the Ruby programming language is the block. If you&amp;rsquo;ve used one of the Enumerable mixed-in objects, you&amp;rsquo;ve encountered the block syntax.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;script&gt;
$(function() {
    $(&#39;.ruby-code&#39;).opalBox();
  var $targets = $(&#34;.ruby-code textarea&#34;)
  $targets.each(function() {
    $(this).height(0).height(this.scrollHeight - $(this).css(&#34;font-size&#34;).replace(&#39;px&#39;,&#39;&#39;)).change();
  })
});
&lt;/script&gt;


&lt;p&gt;For example:&lt;/p&gt;

&lt;div class=&#34;ruby-code&#34;&gt;
array = [1, 2, 3, 4, 5]

# returns all the odd numbers of the array
array.delete_if { |e| e.even? }
&lt;/div&gt;

&lt;p&gt;Or the more common:&lt;/p&gt;

&lt;div class=&#34;ruby-code&#34;&gt;
array = [1, 2, 3, 4, 5]

# prints out all of the array&#39;s elements
array.each do |element|
  puts element
end
&lt;/div&gt;

&lt;p&gt;Ruby blocks also enable a lot of the functional programming DSL such as:&lt;/p&gt;

&lt;div class=&#34;ruby-code&#34;&gt;
array = [1, 2, 3, 4, 5]

# returns the sum of the squares of each element of the array
array.map { |e| e ** 2 }.reduce(:+)
&lt;/div&gt;

&lt;p&gt;Robert Sosinski has written a really awesome &lt;a href=&#34;http://www.robertsosinski.com/2008/12/21/understanding-ruby-blocks-procs-and-lambdas/&#34;&gt;tutorial&lt;/a&gt; about ruby blocks and I&amp;rsquo;m encouraging you to go through it.&lt;/p&gt;

&lt;p&gt;All of these however are just skimming over the power of blocks. Sure, they&amp;rsquo;re good for eye candy &amp;ndash; we won&amp;rsquo;t be able to use such an elegant looping syntax without the use of blocks, but it&amp;rsquo;s not just another way to loop over a collection!&lt;/p&gt;

&lt;p&gt;In fact, blocks (and its related concepts Procs and lambdas) enable a very important programming concept: &lt;a href=&#34;http://en.wikipedia.org/wiki/Loose_coupling&#34;&gt;loose coupling.&lt;/a&gt; For instance, suppose you do:&lt;/p&gt;

&lt;div class=&#34;ruby-code&#34;&gt;
def print_name
  puts &#34;Hello there. I&#39;ve got your name:&#34;
  yield
end

print_name do
  puts &#34;Tristan&#34;
end
&lt;/div&gt;

&lt;p&gt;I could just have as easily done this:&lt;/p&gt;

&lt;div class=&#34;ruby-code&#34;&gt;
def print_name(name)
  puts &#34;Hello there. I&#39;ve got your name:&#34;
  puts name
end

print_name(&#34;Tristan&#34;)
&lt;/div&gt;

&lt;p&gt;Which does exactly the same thing.&lt;/p&gt;

&lt;p&gt;Well not exactly, because with the second example, the method explicitly defined that the name be printed out to STDOUT whereas in the first example, I could have done:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;print_name do
  File.open(local_filename, &#39;w&#39;) {|f| f.write(name) }
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which writes the name into a file. I could have just as easily logged it using &lt;code&gt;Rails.logger&lt;/code&gt;, or sent it over a TCP Socket, or save it in a database entry (granted &lt;code&gt;print_name&lt;/code&gt; is a bad method name for this purpose, but hey &amp;ndash; with great power comes great responsibility).&lt;/p&gt;

&lt;p&gt;Rob Sobers had an epiphany that many people seeking to understand blocks have had. As mentioned in Rob&amp;rsquo;s &lt;a href=&#34;http://robsobers.com/struggle-ruby-blocks/&#34;&gt;article&lt;/a&gt;, you are an active participant in the method you&amp;rsquo;re calling. The method is basically doing a cop-out and telling you &amp;ldquo;hey, I&amp;rsquo;m gonna do this and this but I&amp;rsquo;m giving you the option to also do something else while I&amp;rsquo;m doing that (which I heavily encourage you to do so because you&amp;rsquo;re actually doing the heavy lifting)&amp;rdquo;&lt;/p&gt;

&lt;p&gt;This allows you to be quite flexible when you&amp;rsquo;re writing reusable code or libraries, of which you don&amp;rsquo;t really know (or care) what the client code would do. That&amp;rsquo;s the case for the &lt;a href=&#34;https://github.com/parasquid/snoopka&#34;&gt;Snoopka Gem&lt;/a&gt; I wrote, which does the work of connecting to a Kafka stream but defers the processing of the messages to client code.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;puts &#39;Starting the Kafka listener&#39;

listener = Snoopka::Listener.new host: &amp;quot;localhost&amp;quot;, port: 9092

handler = Handler.new
listener.add_observer &#39;test&#39;, &amp;amp;handler
# or alternatively you can also do
#
# listener.add_observer &#39;test&#39; do |message|
#   puts &amp;quot;your handler code here&amp;quot;
#   puts message
# end

loop do
  listener.consume
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is another neat way to use blocks in your code. Have you ever written a migration script or Rakefile and you wanted to know how long it will take at a particular point in time? There&amp;rsquo;s this gem called &lt;a href=&#34;https://github.com/jfelchner/ruby-progressbar&#34;&gt;ProgressBar&lt;/a&gt; that does exactly that. I&amp;rsquo;ll show you how to make your task so that it will pipe in information to ProgressBar in order for it to display cool stuff.&lt;/p&gt;

&lt;p&gt;This code is, by the way, lifted from production code (of course the implementation details have been mocked out; tangentially, the ability to mock things out is one side-effect of good programming design, but that&amp;rsquo;s a topic for another day):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# tasks/migration.rb
module Tasks
  class Migration
    def self.migrate_all(offset=0,limit=(Tasks::Lead.count - offset))
      Tasks::Lead.offsetted_entries.each do |lead|
        migrate_lead(lead)
        yield lead if block_given?
      end
    end

    def self.migrate_lead(m_lead)
      # mocked response
      # originally copied over the lead from MongoDB to Postgres
      sleep(rand(1..200)/100)
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# tasks/lead.rb
module Tasks
  class Lead
    def self.count
      offsetted_entries.count
    end

    def self.offsetted_entries(skip=0, offset=0)
      # mocked response
      # originally returns leads from the database with a particular
      # skip and offset
      return 1..100
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Rakefile
namespace :migrations do
  desc &#39;migrate entries from old mongodb database to postgresql&#39;
  task :migrate_from_mongodb_to_postgres =&amp;gt; :environment do
    progress = ProgressBar.create title: &#39;Leads&#39;,
      total: Tasks::Lead.count,
      :format =&amp;gt; &#39;%a |%b&amp;gt;&amp;gt;%i| %p%% %t %c of %C %e&#39;
      
    Tasks::Migration.migrate_all { progress.increment }

    progress.finish
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also get this code from &lt;a href=&#34;https://github.com/mindvalley/code_kata&#34;&gt;github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Blocks are Ruby constructs that provide a very clean and elegant way to provide flexibility to your code. Do you have any other ideas on how to improve your code using blocks?&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;updates&#34;&gt;Updates&lt;/h3&gt;

&lt;p&gt;I presented this topic to the KL Ruby Brigade meetup in Kuala Lumpur, Malaysia. There have been a few questions after the presentation and I&amp;rsquo;ll try to address them here:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Q: What&amp;rsquo;s the difference between a block and a Proc?&lt;/p&gt;

&lt;p&gt;A: I think &lt;a href=&#34;http://www.robertsosinski.com/2008/12/21/understanding-ruby-blocks-procs-and-lambdas/&#34;&gt;Robert&lt;/a&gt; will explain this a lot more comprehensively. In a nutshell: a block and a Proc are conceptually similar but a Proc gives you a handle that allows you to reuse the block later on, whereas a block is similar to an anonymous function in Java or C# (you define them inline and you can&amp;rsquo;t refer to them again later on).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Q: What&amp;rsquo;s the difference between the &lt;code&gt;{}&lt;/code&gt; syntax and the &lt;code&gt;do...end&lt;/code&gt; syntax?&lt;/p&gt;

&lt;p&gt;A: This has bitten me and many of my colleagues, and the answer has to do with binding precedence. This &lt;a href=&#34;http://stackoverflow.com/a/5587399&#34;&gt;Stackoverflow answer&lt;/a&gt; can give you more details. In a nutshell, the &lt;code&gt;{}&lt;/code&gt; syntax binds strongly; that means without parentheses it will bind to the last parameter (in a multi-parameter method) whereas the &lt;code&gt;do...end&lt;/code&gt; syntax will always bind to the invocation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;further-reading&#34;&gt;Further Reading&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.robertsosinski.com/2008/12/21/understanding-ruby-blocks-procs-and-lambdas/&#34;&gt;http://www.robertsosinski.com/2008/12/21/understanding-ruby-blocks-procs-and-lambdas/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/4911353/best-explanation-of-ruby-blocks&#34;&gt;http://stackoverflow.com/questions/4911353/best-explanation-of-ruby-blocks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/Loose_coupling&#34;&gt;http://en.wikipedia.org/wiki/Loose_coupling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://robsobers.com/struggle-ruby-blocks/&#34;&gt;http://robsobers.com/struggle-ruby-blocks/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jfelchner/ruby-progressbar&#34;&gt;https://github.com/jfelchner/ruby-progressbar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mindvalley/code_kata&#34;&gt;https://github.com/mindvalley/code_kata&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/parasquid/snoopka&#34;&gt;https://github.com/parasquid/snoopka&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/a/5587399&#34;&gt;http://stackoverflow.com/a/5587399&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>