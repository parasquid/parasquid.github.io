<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Life Beyond Rails</title>
    <link>http://life.beyondrails.com/index.xml</link>
    <description>Recent content on Life Beyond Rails</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 13 Aug 2016 15:00:00 +0800</lastBuildDate>
    <atom:link href="http://life.beyondrails.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Life Beyond Rails: Building Cross Platform Applications</title>
      <link>http://life.beyondrails.com/blog/2016/08/13/life-beyond-rails-building-cross-platform-applications/</link>
      <pubDate>Sat, 13 Aug 2016 15:00:00 +0800</pubDate>
      
      <guid>http://life.beyondrails.com/blog/2016/08/13/life-beyond-rails-building-cross-platform-applications/</guid>
      <description>&lt;p&gt;This is the talk I presented during the first &lt;a href=&#34;http://rubyconf.my/&#34;&gt;Ruby Conference in Kuala Lumpur&lt;/a&gt;, Malaysia. It&amp;rsquo;s not a word-for-word transcription, but this is mostly the same material I wrote to prepare for the talk.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://s3-ap-southeast-1.amazonaws.com/hackworkplay-assets/rubyconfkl2016-page-001.resized.jpg&#34; alt=&#34;Life Beyond Rails&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The secret to creating cross platform apps is something you already know, but probably not doing.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;https://s3-ap-southeast-1.amazonaws.com/hackworkplay-assets/rubyconfkl2016-page-002.resized.jpg&#34; alt=&#34;Life Beyond Rails&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I used Ruby to write a streaming app, a request-response app, a client-side web app, and a mobile app.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;https://s3-ap-southeast-1.amazonaws.com/hackworkplay-assets/rubyconfkl2016-page-003.resized.jpg&#34; alt=&#34;Life Beyond Rails&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m Tristan, and I&amp;rsquo;m the Chief Problem Solver at &lt;a href=&#34;http://www.mindvalley.com/&#34;&gt;Mindvalley&lt;/a&gt;. You can find me on facebook and github @parasquid.&lt;/p&gt;

&lt;p&gt;Like many of you, I was a self-taught programmer. It all started many years ago when I was around 9 or 10; my father had an Apple ][+ clone called Minta ][ and I spent many nights typing in programs in BASIC from Byte magazine.&lt;/p&gt;

&lt;p&gt;After that, came QBasic in high school (I was fortunate to have studied in a more technical school that taught programming and Wordstar, among other things) as well as C/C++ and dBase/Clipper.&lt;/p&gt;

&lt;p&gt;After that, I joined an opensource project that was primarily in Perl and picked that up. Around 2005 the project leader introduced me to Ruby and I remember telling him &amp;ldquo;It&amp;rsquo;s just like Perl!&amp;rdquo; and promptly forgot about it.&lt;/p&gt;

&lt;p&gt;I picked up Java for a job I had in a VAS (valu-added services) company&amp;ndash;we were making apps before they were cool&amp;ndash;handling the applications that respond when you send an SMS to 2467. Then I rediscovered Ruby because of Mindvalley, and at that time also got introduced to Rails.&lt;/p&gt;

&lt;p&gt;Unfortunately (or fortunately, as some might think) I skipped PHP altogether so I don&amp;rsquo;t have as much of horror developer stories as the rest of us. :)&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;https://s3-ap-southeast-1.amazonaws.com/hackworkplay-assets/rubyconfkl2016-page-004.resized.jpg&#34; alt=&#34;Life Beyond Rails&#34; /&gt;&lt;/p&gt;

&lt;p&gt;But now, I love Ruby. Its currently my favorite language. It&amp;rsquo;s the hammer I use to solve all the problems that come my way.&lt;/p&gt;

&lt;p&gt;If I can just use Ruby all the time, not just for web but also on the frontend, and in mobile, I&amp;rsquo;ll be happy.&lt;/p&gt;

&lt;p&gt;Then I thought, hey that&amp;rsquo;s a challenge! So I did, and that was the small project I made.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;https://s3-ap-southeast-1.amazonaws.com/hackworkplay-assets/rubyconfkl2016-page-006.resized.jpg&#34; alt=&#34;Life Beyond Rails&#34; /&gt;&lt;/p&gt;

&lt;p&gt;So that&amp;rsquo;s it! It&amp;rsquo;s proof that ruby is cross platform! We can now all go home and tell everyone we can also do mobile development. We just need to learn how to compile ruby using RubyMotion.&lt;/p&gt;

&lt;p&gt;So that&amp;rsquo;s it! It&amp;rsquo;s proof that ruby is cross platform! We can now tell everyone we can also do mobile development, we just need to learn how to compile ruby using RubyMotion.&lt;/p&gt;

&lt;p&gt;Right?&lt;/p&gt;

&lt;p&gt;The thing is, I think the meaning of &amp;ldquo;cross platform&amp;rdquo; is usually misunderstood.&lt;/p&gt;

&lt;p&gt;What does cross platform really mean then?&lt;/p&gt;

&lt;p&gt;In order to understand that, we need to know what cross platform isn’t.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;https://s3-ap-southeast-1.amazonaws.com/hackworkplay-assets/rubyconfkl2016-page-007.resized.jpg&#34; alt=&#34;Life Beyond Rails&#34; /&gt;&lt;/p&gt;

&lt;p&gt;What does Voyager 2, your legacy Rails app, and your hackathon prototype have in common?&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;https://s3-ap-southeast-1.amazonaws.com/hackworkplay-assets/rubyconfkl2016-page-008.resized.jpg&#34; alt=&#34;Life Beyond Rails&#34; /&gt;&lt;/p&gt;

&lt;p&gt;They&amp;rsquo;re &lt;a href=&#34;http://witforsale.com/dead-end-products/&#34;&gt;dead end products&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When the Voyager 2 was made, they didn&amp;rsquo;t intend to repair or update it after launch. If there was any glitch or malfunction, the only way to fix it was to launch another probe.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;https://s3-ap-southeast-1.amazonaws.com/hackworkplay-assets/rubyconfkl2016-page-009.resized.jpg&#34; alt=&#34;Life Beyond Rails&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In some ways, it made the design process so much easier.&lt;/p&gt;

&lt;p&gt;The power cells can be directly welded to the modules because they&amp;rsquo;ll never be taken apart anyway.&lt;/p&gt;

&lt;p&gt;So what if the antenna can only operate on a fixed frequency? There&amp;rsquo;s no need for a tuning knob because it will never be retuned.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;https://s3-ap-southeast-1.amazonaws.com/hackworkplay-assets/rubyconfkl2016-page-010.resized.jpg&#34; alt=&#34;Life Beyond Rails&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Then again, Voyager 2 will never change, and will never be used for a different purpose.&lt;/p&gt;

&lt;p&gt;You&amp;rsquo;re not touching your legacy Rails app because you &amp;ldquo;don&amp;rsquo;t fix it if it ain&amp;rsquo;t broke,&amp;rdquo; and you&amp;rsquo;d prefer to just rewrite it from scratch anyway.&lt;/p&gt;

&lt;p&gt;Your hackathon prototype works well for the pitch, but it is not suited for production purposes.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;https://s3-ap-southeast-1.amazonaws.com/hackworkplay-assets/rubyconfkl2016-page-011.resized.jpg&#34; alt=&#34;Life Beyond Rails&#34; /&gt;&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s the same with your code.&lt;/p&gt;

&lt;p&gt;Ask yourself the question: can you reuse a significant portion of the code you wrote if, by some magical means you can suddenly run your code in a different platform?&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;https://s3-ap-southeast-1.amazonaws.com/hackworkplay-assets/rubyconfkl2016-page-012.resized.jpg&#34; alt=&#34;Life Beyond Rails&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Cross platform means absolutely nothing if you can&amp;rsquo;t reuse your code.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll repeat this again, and you know it&amp;rsquo;s important because I said it twice.&lt;/p&gt;

&lt;p&gt;Cross platform is useless if your code can&amp;rsquo;t be reused.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;https://s3-ap-southeast-1.amazonaws.com/hackworkplay-assets/rubyconfkl2016-page-013.resized.jpg&#34; alt=&#34;Life Beyond Rails&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Interesting isn&amp;rsquo;t it? What benefit is it that ruby runs on an iOS device when you have to rewrite the whole codebase from scratch anyway?&lt;/p&gt;

&lt;p&gt;You might as well just learn swift and do it the way apple wants you to do it.&lt;/p&gt;

&lt;p&gt;Reuse of prior work across multiple platforms is the biggest reason why you want cross platform support.&lt;/p&gt;

&lt;p&gt;So how do you design your code so that it is reusable?&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;https://s3-ap-southeast-1.amazonaws.com/hackworkplay-assets/rubyconfkl2016-page-014.resized.jpg&#34; alt=&#34;Life Beyond Rails&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s take a look at the calculator.&lt;/p&gt;

&lt;p&gt;Notice how the UI and the domain logic are separate. How in this example, we put the React UI, while in this example, we put the telnet UI and here, we put the iOS ui.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s almost as if you&amp;rsquo;re just able to just swap things  around just like that!
Right?&lt;/p&gt;

&lt;p&gt;Do you know what this reminds me of?&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;https://s3-ap-southeast-1.amazonaws.com/hackworkplay-assets/rubyconfkl2016-page-015.resized.jpg&#34; alt=&#34;Life Beyond Rails&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This. A USB cable.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;https://s3-ap-southeast-1.amazonaws.com/hackworkplay-assets/rubyconfkl2016-page-016.resized.jpg&#34; alt=&#34;Life Beyond Rails&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I can use the same cable to charge a cellphone, a powerbank, a camera, and various other things.&lt;/p&gt;

&lt;p&gt;They all follow the same standard so they are all interchangeable.&lt;/p&gt;

&lt;p&gt;And I don&amp;rsquo;t have to know which pin of the USB connects carries the electricity&amp;ndash;I just know that if I plug one end to a power source and the other end to the device, it will charge.&lt;/p&gt;

&lt;p&gt;Nobody would think of making a phone that has its power cable attached and not detachable. Well maybe Apple might.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;https://s3-ap-southeast-1.amazonaws.com/hackworkplay-assets/rubyconfkl2016-page-017.resized.jpg&#34; alt=&#34;Life Beyond Rails&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In majority of the cases, the cross platform problem is solved in the physical world. We intuitively understand how to design products that can be reused.&lt;/p&gt;

&lt;p&gt;But because software is intangible it&amp;rsquo;s difficult to apply our experience as meatbags to the act of creating software.&lt;/p&gt;

&lt;p&gt;So what can we take from designing physical products and apply it to software development?&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;https://s3-ap-southeast-1.amazonaws.com/hackworkplay-assets/rubyconfkl2016-page-018.resized.jpg&#34; alt=&#34;Life Beyond Rails&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s take a look at the USB cable example again.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;https://s3-ap-southeast-1.amazonaws.com/hackworkplay-assets/rubyconfkl2016-page-019.resized.jpg&#34; alt=&#34;Life Beyond Rails&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Remember when I said they all follow the same standard? That means the USB cable can treat different objects in the same way.&lt;/p&gt;

&lt;p&gt;They all have the same USB interface, so from the point of view of the cable, they&amp;rsquo;re all the same thing (even though they&amp;rsquo;re not).&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;https://s3-ap-southeast-1.amazonaws.com/hackworkplay-assets/rubyconfkl2016-page-020.resized.jpg&#34; alt=&#34;Life Beyond Rails&#34; /&gt;&lt;/p&gt;

&lt;p&gt;How about when I said that I don&amp;rsquo;t need to care about the electromotive force or which pins carry the electricity?&lt;/p&gt;

&lt;p&gt;That means I don&amp;rsquo;t even have to know how the cable was made in order to use it! I also immediately know that the cable is not for drying my hair, or for opening a can.&lt;/p&gt;

&lt;p&gt;It was less complicated because the list of things I can do with the cable was small, and the kinds of things I can use the cable with was also limited.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;https://s3-ap-southeast-1.amazonaws.com/hackworkplay-assets/rubyconfkl2016-page-021.resized.jpg&#34; alt=&#34;Life Beyond Rails&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In effect, you’re replacing the questions on the left with this one question on the right.&lt;/p&gt;

&lt;p&gt;You’re reducing the surface area of the complexity involved.&lt;/p&gt;

&lt;p&gt;I think some of you would already know where I’m going here.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;https://s3-ap-southeast-1.amazonaws.com/hackworkplay-assets/rubyconfkl2016-page-022.resized.jpg&#34; alt=&#34;Life Beyond Rails&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Instead of asking how does this work, or which things can I use this with, I now just ask: what can this do?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Encapsulation: What vs How&lt;/li&gt;
&lt;li&gt;Polymorphism: What vs Which&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These two might sound familiar. You&amp;rsquo;d know them from Object Oriented Programming.&lt;/p&gt;

&lt;p&gt;But they’re not purely the domain of OOP&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;https://s3-ap-southeast-1.amazonaws.com/hackworkplay-assets/rubyconfkl2016-page-023.resized.jpg&#34; alt=&#34;Life Beyond Rails&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Here’s an example. what does a storage device, an input device, and a network socket have in common?&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;https://s3-ap-southeast-1.amazonaws.com/hackworkplay-assets/rubyconfkl2016-page-024.resized.jpg&#34; alt=&#34;Life Beyond Rails&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Bonus points for whoever can tell me the reference in this picture.&lt;/p&gt;

&lt;p&gt;From the Unix perspective, they’re all files.&lt;/p&gt;

&lt;p&gt;Everything is a file&lt;/p&gt;

&lt;p&gt;Well technically, everything is a file descriptor.&lt;/p&gt;

&lt;p&gt;But have you ever wondered how is this possible? How can you have an operating system treating everything as if it’s a file when it&amp;rsquo;s obvious that an ethernet device isn&amp;rsquo;t a file?&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;https://s3-ap-southeast-1.amazonaws.com/hackworkplay-assets/rubyconfkl2016-page-025.resized.jpg&#34; alt=&#34;Life Beyond Rails&#34; /&gt;&lt;/p&gt;

&lt;p&gt;There are generally five functions you need to implement if you want to write a device driver for a Unix system. There are more, but these five are the most common.&lt;/p&gt;

&lt;p&gt;If you implement these (and note that returning nil is an implementation; just take a look at &lt;code&gt;/dev/null&lt;/code&gt;) then you conform to the file descriptor POSIX API specification.&lt;/p&gt;

&lt;p&gt;That also means you get the benefits of getting treated just like every other file.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;https://s3-ap-southeast-1.amazonaws.com/hackworkplay-assets/rubyconfkl2016-page-026.resized.jpg&#34; alt=&#34;Life Beyond Rails&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Or, just like what Tyler Durden from fight club says: you are not a beautiful or unique snowflake.&lt;/p&gt;

&lt;p&gt;And that’s a good thing!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;https://s3-ap-southeast-1.amazonaws.com/hackworkplay-assets/rubyconfkl2016-page-027.resized.jpg&#34; alt=&#34;Life Beyond Rails&#34; /&gt;&lt;/p&gt;

&lt;p&gt;That means that you can use common tools to operate on different things.&lt;/p&gt;

&lt;p&gt;Whether it’s a storage device, a network stream, or the keyboard circular buffer, you can use the common unix tools to operate on them&lt;/p&gt;

&lt;p&gt;Even if you don’t care about whether the device responds—just use &lt;code&gt;/dev/null&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;https://s3-ap-southeast-1.amazonaws.com/hackworkplay-assets/rubyconfkl2016-page-028.resized.jpg&#34; alt=&#34;Life Beyond Rails&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In this case, common tools operating on different things is the principle, polymorphism is the technique.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;https://s3-ap-southeast-1.amazonaws.com/hackworkplay-assets/rubyconfkl2016-page-029.resized.jpg&#34; alt=&#34;Life Beyond Rails&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You can also have encapsulation without oop&lt;/p&gt;

&lt;p&gt;In fact, you’re using it all the time. when you open your browser and go to google.com you don’t really care about how google retrieved the search results; all you’re interested in is what the search results are.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;https://s3-ap-southeast-1.amazonaws.com/hackworkplay-assets/rubyconfkl2016-page-030.resized.jpg&#34; alt=&#34;Life Beyond Rails&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In a sense, your only public interface is that of the search bar.&lt;/p&gt;

&lt;p&gt;It represents the big, complicated machinery that is called google search, and presents it as something that can be easily understood.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;https://s3-ap-southeast-1.amazonaws.com/hackworkplay-assets/rubyconfkl2016-page-031.resized.jpg&#34; alt=&#34;Life Beyond Rails&#34; /&gt;&lt;/p&gt;

&lt;p&gt;A more code related example: Let’s take a quick look at the calculator brain.&lt;/p&gt;

&lt;p&gt;Notice how the Brain class only has a few exposed methods, out of which two are used in react: &lt;code&gt;display&lt;/code&gt;, &lt;code&gt;input_char&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Three if you count &lt;code&gt;new&lt;/code&gt; which creates an object out of the class.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;https://s3-ap-southeast-1.amazonaws.com/hackworkplay-assets/rubyconfkl2016-page-032.resized.jpg&#34; alt=&#34;Life Beyond Rails&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Here’s the object that have its methods exposed.&lt;/p&gt;

&lt;p&gt;This isn’t the best implementation of a calculator, but that’s okay. Notice that I can easily refactor or rewrite this entirely without severely affecting the UI framework.&lt;/p&gt;

&lt;p&gt;Because the UI framework only know about a few very specific api calls, they don’t know a lot about how the brain operates. They are shielded from changes in the brain.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;https://s3-ap-southeast-1.amazonaws.com/hackworkplay-assets/rubyconfkl2016-page-033.resized.jpg&#34; alt=&#34;Life Beyond Rails&#34; /&gt;&lt;/p&gt;

&lt;p&gt;That’s because this object has a very small surface area.&lt;/p&gt;

&lt;p&gt;Note the distinction here. I didn’t say that the object was small - it really isn&amp;rsquo;t. I said that its surface area is small.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;ve ever encountered God objects in your code (hint: check all files in your code that end with &amp;ldquo;service&amp;rdquo;) then you know the problem very well. You have a very hard time debugging your application because it&amp;rsquo;s just so big and complex!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;https://s3-ap-southeast-1.amazonaws.com/hackworkplay-assets/rubyconfkl2016-page-034.resized.jpg&#34; alt=&#34;Life Beyond Rails&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Well. You see, the problem isn&amp;rsquo;t that those objects are too big.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;https://s3-ap-southeast-1.amazonaws.com/hackworkplay-assets/rubyconfkl2016-page-035.resized.jpg&#34; alt=&#34;Life Beyond Rails&#34; /&gt;&lt;/p&gt;

&lt;p&gt;It’s because God objects are too fat (paraphrasing &lt;a href=&#34;http://2014.jsconf.eu/speakers/sebastian-markbage-minimal-api-surface-area-learning-patterns-instead-of-frameworks.html&#34;&gt;Sebastian Markbage&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;When your objects try to expose a lot of methods in its interface, the API surface area of your objects is too wide.&lt;/p&gt;

&lt;p&gt;And that makes your app complex and difficult to manage because these APIs will get used, and you need to remember all of these things. You will have to memorize them and keep asking yourself: what connects to where?&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;https://s3-ap-southeast-1.amazonaws.com/hackworkplay-assets/rubyconfkl2016-page-036.resized.jpg&#34; alt=&#34;Life Beyond Rails&#34; /&gt;&lt;/p&gt;

&lt;p&gt;So the principle here is information hiding, and the technique is encapsulation.&lt;/p&gt;

&lt;p&gt;This concept allows you to represent something really big and complex with something small and simple by exposing a small surface api.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;https://s3-ap-southeast-1.amazonaws.com/hackworkplay-assets/rubyconfkl2016-page-037.resized.jpg&#34; alt=&#34;Life Beyond Rails&#34; /&gt;&lt;/p&gt;

&lt;p&gt;But yeah, we all know about this already, right? Ruby is OOP, we use OOP all the time!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;https://s3-ap-southeast-1.amazonaws.com/hackworkplay-assets/rubyconfkl2016-page-038.resized.jpg&#34; alt=&#34;Life Beyond Rails&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the thing: If you ask many programmers what OOP is about, they’ll just tell you it’s using objects to do stuff.&lt;/p&gt;

&lt;p&gt;They’ll tell you that OOP is about programming with objects. It’s not, that’s just a tautology&amp;ndash;saying the same thing twice in different words.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;https://s3-ap-southeast-1.amazonaws.com/hackworkplay-assets/rubyconfkl2016-page-039.resized.jpg&#34; alt=&#34;Life Beyond Rails&#34; /&gt;&lt;/p&gt;

&lt;p&gt;So no. It’s not just about programming with objects.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;https://s3-ap-southeast-1.amazonaws.com/hackworkplay-assets/rubyconfkl2016-page-040.resized.jpg&#34; alt=&#34;Life Beyond Rails&#34; /&gt;&lt;/p&gt;

&lt;p&gt;It’s a different way of thinking about your code, where you tell an object what you want, instead of just storing and operating on data.&lt;/p&gt;

&lt;p&gt;It is a method of organization.&lt;/p&gt;

&lt;p&gt;And it’s just one of many.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;https://s3-ap-southeast-1.amazonaws.com/hackworkplay-assets/rubyconfkl2016-page-041.resized.jpg&#34; alt=&#34;Life Beyond Rails&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Just like Functional, Prototype-based, Rails-way based, or a combination of these are. They are all ways to organize your program so you can more easily figure out how things are connected.&lt;/p&gt;

&lt;p&gt;I think we&amp;rsquo;re doing ourselves a disservice by not going back to basics and experiencing for ourselves a whole new different way of writing our apps.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;https://s3-ap-southeast-1.amazonaws.com/hackworkplay-assets/rubyconfkl2016-page-042.resized.jpg&#34; alt=&#34;Life Beyond Rails&#34; /&gt;&lt;/p&gt;

&lt;p&gt;If you want to write cross platform apps, you need to write reusable code.&lt;/p&gt;

&lt;p&gt;Unfortunately, the Rails way of writing apps is not enough.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;https://s3-ap-southeast-1.amazonaws.com/hackworkplay-assets/rubyconfkl2016-page-043.resized.jpg&#34; alt=&#34;Life Beyond Rails&#34; /&gt;&lt;/p&gt;

&lt;p&gt;That doesn’t mean that the Rails way is “wrong” or that we should stop using it because it “promotes bad habits”
a framework is, after all, just a tool and it is up to the programmer to decide how to use it.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;https://s3-ap-southeast-1.amazonaws.com/hackworkplay-assets/rubyconfkl2016-page-044.resized.jpg&#34; alt=&#34;Life Beyond Rails&#34; /&gt;&lt;/p&gt;

&lt;p&gt;DHH famously said that &lt;a href=&#34;http://david.heinemeierhansson.com/2012/rails-is-omakase.html&#34;&gt;Rails is Omakase&lt;/a&gt;, that he is the head chef that decides the experience that is Rails. And this arrangement has been great because Rails is an awesome framework that makes it really easy to make web applications.&lt;/p&gt;

&lt;p&gt;And that is where we run into a problem with cross platform support; the Rails way is too web centric that it’s very difficult to reuse prior work for other platforms.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;https://s3-ap-southeast-1.amazonaws.com/hackworkplay-assets/rubyconfkl2016-page-045.resized.jpg&#34; alt=&#34;Life Beyond Rails&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Does that mean we should just not use Rails or any other framework at all?&lt;/p&gt;

&lt;p&gt;Not at all.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;https://s3-ap-southeast-1.amazonaws.com/hackworkplay-assets/rubyconfkl2016-page-046.resized.jpg&#34; alt=&#34;Life Beyond Rails&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This is Kent Beck, he is the founder of Extreme Programming, the precursor to what we now call agile software development, and from where we get the scrum methodology.&lt;/p&gt;

&lt;p&gt;One of his papers talked about connected and modular designs, and the Rails way falls quite near to the connected design model.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;https://s3-ap-southeast-1.amazonaws.com/hackworkplay-assets/rubyconfkl2016-page-047.resized.jpg&#34; alt=&#34;Life Beyond Rails&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Here’s what &lt;a href=&#34;https://gist.github.com/parasquid/efa7a516913769726b32e768f673f31a#design-for-latency&#34;&gt;he said&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In a connected system, elements are highly available to each other (via global state, for example). Adding the first feature to a connected system is cheap. All the resources you need are available. However, the cost of all those connections is that subsequent features are very likely to interact with previous features, driving up the cost of development over time.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is one of the reasons why Rails apps can be built so fast. I join hackathons, and I always use Rails because it’s really so easy to just build features because I have access to everything.&lt;/p&gt;

&lt;p&gt;It’s one of the reasons why bootcamps and one day tutorials can show people the power of programming—because producing a usable output is so easy.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;https://s3-ap-southeast-1.amazonaws.com/hackworkplay-assets/rubyconfkl2016-page-048.resized.jpg&#34; alt=&#34;Life Beyond Rails&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Here’s the next thing &lt;a href=&#34;https://gist.github.com/parasquid/efa7a516913769726b32e768f673f31a#design-for-latency&#34;&gt;he said&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A modular design has connections deliberately kept to a minimum. The cost for the first feature is likely to be higher than in the connected system, because you need to find the necessary resources and bring them together, possibly re-modularizing in the process. Features are much less likely to interact in a modular system, though, leading to a steady stream of features at relatively constant cost.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And so we have a problem.&lt;/p&gt;

&lt;p&gt;A mature system benefits from a modular design. We know about the &lt;a href=&#34;https://docs.spring.io/spring/docs/2.5.x/javadoc-api/org/springframework/aop/framework/AbstractSingletonProxyFactoryBean.html&#34;&gt;Abstract Singleton Proxy Factory Bean&lt;/a&gt; jokes in java, but the reason why there’s a lot of code monkeys in enterprise application development is because the modular design allows easy distribution of work.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;https://s3-ap-southeast-1.amazonaws.com/hackworkplay-assets/rubyconfkl2016-page-049.resized.jpg&#34; alt=&#34;Life Beyond Rails&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The issue is that it’s so costly to start modular, because there&amp;rsquo;s a lot of code and thought investment needed.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;https://s3-ap-southeast-1.amazonaws.com/hackworkplay-assets/rubyconfkl2016-page-050.resized.jpg&#34; alt=&#34;Life Beyond Rails&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The advice then, is not to ditch connected designs. Kent Beck recommends to stay on the connected curve until the climb phase, then switch to the modular curve.&lt;/p&gt;

&lt;p&gt;How do you know when the climb phase begins? That’s when experience comes in.&lt;/p&gt;

&lt;p&gt;How would you even know what to switch to if you’re not familiar with how modular designs look like?&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;https://s3-ap-southeast-1.amazonaws.com/hackworkplay-assets/rubyconfkl2016-page-051.resized.jpg&#34; alt=&#34;Life Beyond Rails&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We need to find that knowledge to organize your code as if it was a USB cable.&lt;/p&gt;

&lt;p&gt;That would be really cool.&lt;/p&gt;

&lt;p&gt;If you wanted to swap the UI, all you needed to do is to write the UI layer for that framework.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;https://s3-ap-southeast-1.amazonaws.com/hackworkplay-assets/rubyconfkl2016-page-052.resized.jpg&#34; alt=&#34;Life Beyond Rails&#34; /&gt;&lt;/p&gt;

&lt;p&gt;It would look something like this&lt;/p&gt;

&lt;p&gt;[request-response] Rails &amp;ndash; App&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;https://s3-ap-southeast-1.amazonaws.com/hackworkplay-assets/rubyconfkl2016-page-053.resized.jpg&#34; alt=&#34;Life Beyond Rails&#34; /&gt;&lt;/p&gt;

&lt;p&gt;[streaming] Telnet/Websockets &amp;ndash; App&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;https://s3-ap-southeast-1.amazonaws.com/hackworkplay-assets/rubyconfkl2016-page-054.resized.jpg&#34; alt=&#34;Life Beyond Rails&#34; /&gt;&lt;/p&gt;

&lt;p&gt;[mobile] RubyMotion &amp;ndash; App&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;https://s3-ap-southeast-1.amazonaws.com/hackworkplay-assets/rubyconfkl2016-page-055.resized.jpg&#34; alt=&#34;Life Beyond Rails&#34; /&gt;&lt;/p&gt;

&lt;p&gt;[browser] Opal &amp;ndash; App&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;https://s3-ap-southeast-1.amazonaws.com/hackworkplay-assets/rubyconfkl2016-page-056.resized.jpg&#34; alt=&#34;Life Beyond Rails&#34; /&gt;&lt;/p&gt;

&lt;p&gt;[hardware] mRuby &amp;ndash; App&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;https://s3-ap-southeast-1.amazonaws.com/hackworkplay-assets/rubyconfkl2016-page-057.resized.jpg&#34; alt=&#34;Life Beyond Rails&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The rails way is what we&amp;rsquo;re familiar with.&lt;/p&gt;

&lt;p&gt;Many of us started learning ruby because of rails. I got reintroduced to ruby because Mindvalley uses rails.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;https://s3-ap-southeast-1.amazonaws.com/hackworkplay-assets/rubyconfkl2016-page-058.resized.jpg&#34; alt=&#34;Life Beyond Rails&#34; /&gt;&lt;/p&gt;

&lt;p&gt;But my point is, that it’s not the only code-organization technique out there.&lt;/p&gt;

&lt;p&gt;And we haven’t been seeking them out.&lt;/p&gt;

&lt;p&gt;Have you tried any of these? Have you tried to at least deviate a little bit from the Rails way?&lt;/p&gt;

&lt;p&gt;Here you have a command-query separation by Bertrand Meyer, here you have event sourcing which says that all changes to an application state should be stored as a sequence of events, and here we have the DCI paradigm which builds on top of OOP.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;https://s3-ap-southeast-1.amazonaws.com/hackworkplay-assets/rubyconfkl2016-page-059.resized.jpg&#34; alt=&#34;Life Beyond Rails&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Our industry is still young, but is now mature enough to recognize that there are many different ways to skin a cat.&lt;/p&gt;

&lt;p&gt;These are just a few presentations tackling a different face of the same issue: we are too web centric because the Rails way makes it easy to write web applications&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;https://s3-ap-southeast-1.amazonaws.com/hackworkplay-assets/rubyconfkl2016-page-060.resized.jpg&#34; alt=&#34;Life Beyond Rails&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Tightly coupling with the rails framework works great if you want to create apps that are similar to Basecamp, you’re targeting web only, and you know that&amp;rsquo;s the final iteration of your product.&lt;/p&gt;

&lt;p&gt;But sometimes, your app is far out different from basecamp.&lt;/p&gt;

&lt;p&gt;If you are planning to reuse a significant portion of your code across platforms, the rails way is not enough. But more importantly, it’s not the only organizational technique available to you.&lt;/p&gt;

&lt;p&gt;I think that as programmers, we need to start looking beyond what we’re comfortable with, and start rediscovering solutions to problems that have been solved by other disciplines.&lt;/p&gt;

&lt;p&gt;But if you had only one idea to take home with you, let it be this: that programming is fundamentally an activity by humans, for humans.&lt;/p&gt;

&lt;p&gt;Many people think that programming equals coding, and that’s really disappointing. That’s just scratching the surface, because programming is more than that.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;https://s3-ap-southeast-1.amazonaws.com/hackworkplay-assets/rubyconfkl2016-page-065.resized.jpg&#34; alt=&#34;Life Beyond Rails&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Programming is the act of managing complexity.&lt;/p&gt;

&lt;p&gt;We often make the mistake of thinking that we&amp;rsquo;re programming for the computer. No, your computer won&amp;rsquo;t run your program faster solely because you used a well designed architecture.&lt;/p&gt;

&lt;p&gt;But YOU will be faster, because your wonderful but still limited brain can now comprehend the relationships in the code.&lt;/p&gt;

&lt;p&gt;By organizing our code and designing it so it’s easy to understand, we free our brains and give it space to think about the stuff that really matters: what is your app supposed to do?&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;https://s3-ap-southeast-1.amazonaws.com/hackworkplay-assets/rubyconfkl2016-page-066.resized.jpg&#34; alt=&#34;Life Beyond Rails&#34; /&gt;&lt;/p&gt;

&lt;p&gt;When you start focusing on that question, and start expanding your toolbox, you end up with more flexible, maintainable, and reusable code.&lt;/p&gt;

&lt;p&gt;And that’s it. That’s the answer. That&amp;rsquo;s how you write cross platform apps.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;https://s3-ap-southeast-1.amazonaws.com/hackworkplay-assets/rubyconfkl2016-page-067.resized.jpg&#34; alt=&#34;Life Beyond Rails&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m Tristan, and I&amp;rsquo;m the Chief Problem Solver at Mindvalley. You can find me on facebook and github @parasquid&lt;/p&gt;

&lt;p&gt;Thank you&lt;/p&gt;

&lt;p&gt;Slideshare link: &lt;a href=&#34;http://www.slideshare.net/parasquid/life-beyond-rails-creating-cross-platform-ruby-apps&#34;&gt;http://www.slideshare.net/parasquid/life-beyond-rails-creating-cross-platform-ruby-apps&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Featured Pattern: Rescue, Log, Rethrow</title>
      <link>http://life.beyondrails.com/blog/2016/07/15/featured-pattern-rescue-log-rethrow/</link>
      <pubDate>Fri, 15 Jul 2016 15:16:02 +0800</pubDate>
      
      <guid>http://life.beyondrails.com/blog/2016/07/15/featured-pattern-rescue-log-rethrow/</guid>
      <description>&lt;p&gt;Whenever you use a method that you know might throw an exception but shouldn&amp;rsquo;t, the rescue-log-rethrow pattern is useful to figure out what happened while preserving the contracts implied in the code.
&lt;/p&gt;

&lt;p&gt;For example, we were recently investigating a payload from our ecommerce provider that is throwing a &lt;code&gt;KeyError&lt;/code&gt; exception. Official documentation doesn&amp;rsquo;t provide any information about this, so we had to break out the debugger&amp;rsquo;s favorite tool: the logger.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the original method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def initialize(account_id, api_response)
  @account_id = account_id
  @signature = api_response.fetch(&amp;quot;signature&amp;quot;)
  @token = api_response.fetch(&amp;quot;token&amp;quot;)
  @key = api_response.fetch(&amp;quot;key&amp;quot;)
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For some reason we were getting a 500 error and looking at the available logs:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;status=500 error=&#39;KeyError: key not found: &amp;quot;signature&amp;quot;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here&amp;rsquo;s the &lt;code&gt;rescue-log-rethrow&lt;/code&gt; pattern in action:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def initialize(account_id, api_response)
  @account_id = account_id,
  begin
    @signature = api_response.fetch(&amp;quot;signature&amp;quot;)
    @token = api_response.fetch(&amp;quot;token&amp;quot;)
    @key = api_response.fetch(&amp;quot;key&amp;quot;)
  rescue KeyError =&amp;gt; e
    logger.error &amp;quot;response does not have the required key: #{response.inspect}&amp;quot;
    raise e
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the end we found out that one of the environment variables necessary for connecting to the ecommerce platform was misconfigured and had to be properly set.&lt;/p&gt;

&lt;p&gt;Rethrowing the exception is important, because the original intention of the code was to enforce the contract that none of these keys should be &lt;code&gt;nil&lt;/code&gt; (hence the &lt;code&gt;#fetch&lt;/code&gt; method).&lt;/p&gt;

&lt;p&gt;Never swallow exceptions! Yes, even if you&amp;rsquo;re logging them anyway. If the exception wasn&amp;rsquo;t rethrown, it is possible that a response missing one of the necessary keys will trigger the rescue block and log the message. However, the object now has an undefined state. An object with an undefined state is a recipe for long hours debugging and trying to figure out where the bug might be hiding.&lt;/p&gt;

&lt;p&gt;Immediately rethrowing the exception after logging allows you to keep the context of the exception closer to its origin. This makes it so much easier to trace where the possible bug might have come from.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>TDD and the Scientific Method</title>
      <link>http://life.beyondrails.com/blog/2016/06/02/tdd-and-the-scientific-method/</link>
      <pubDate>Thu, 02 Jun 2016 16:57:36 +0300</pubDate>
      
      <guid>http://life.beyondrails.com/blog/2016/06/02/tdd-and-the-scientific-method/</guid>
      <description>&lt;p&gt;TDD&amp;rsquo;s mantra is the following: Red, Green, Refactor. In other words: write a failing test, write code to make the test fast, and then make the code better (having the test as a safety net).
&lt;/p&gt;

&lt;p&gt;Comparatively, here are the steps of the Scientific Method:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ask a Question&lt;/li&gt;
&lt;li&gt;Do Background Research&lt;/li&gt;
&lt;li&gt;Construct a Hypothesis&lt;/li&gt;
&lt;li&gt;Test Your Hypothesis by Doing an Experiment&lt;/li&gt;
&lt;li&gt;Analyze Your Data and Draw a Conclusion&lt;/li&gt;
&lt;li&gt;Communicate Your Results&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are many parallels between these two disciplines.&lt;/p&gt;

&lt;p&gt;Writing a failing test can be compared to asking a question: &amp;ldquo;can my application do this?&amp;rdquo; with the constructed hypothesis being that &amp;ldquo;no, the application can&amp;rsquo;t do this yet&amp;rdquo; (if it can, we just skip to the next iteration).&lt;/p&gt;

&lt;p&gt;Writing the code to satisfy a test can be compared to doing the experiment to confirm the hypothesis.&lt;/p&gt;

&lt;p&gt;Refactoring can be compared to drawing a conclusion and summarizing your results. Based on what you&amp;rsquo;ve learned on the behavior of the application, you can rearrange the code so it tells a much better story of the intention of the application.&lt;/p&gt;

&lt;p&gt;Of course, it&amp;rsquo;s not an exact parallel. You&amp;rsquo;d be scorned in the scientific community for filtering data and only using those that advance your hypothesis (see &lt;a href=&#34;https://en.wikipedia.org/wiki/Confirmation_bias#Wason.27s_research_on_hypothesis-testing&#34;&gt;Confirmation Bias&lt;/a&gt;) but otherwise, the similarities are striking.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Featured Refactoring: Extract Method</title>
      <link>http://life.beyondrails.com/blog/2016/04/25/featured-refactoring-extract-method/</link>
      <pubDate>Mon, 25 Apr 2016 13:55:34 +0800</pubDate>
      
      <guid>http://life.beyondrails.com/blog/2016/04/25/featured-refactoring-extract-method/</guid>
      <description>&lt;p&gt;I work with &lt;a href=&#34;http://www.mindvalley.com&#34;&gt;really awesome people who do really amazing work&lt;/a&gt;. I came upon this commit recently while I was reviewing a pull request, and I thought I&amp;rsquo;d share them with you.&lt;/p&gt;

&lt;p&gt;Note that some of the information on the diff presented here has been redacted or removed, due to it being proprietary. But the full idea of the refactoring is present.
&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the diff:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;From: Wei Lih Loh &amp;lt;willie@mindvalley.com&amp;gt;
Date: Mon, 25 Apr 2016 11:34:01 +0800
Subject: [PATCH] better naming &amp;amp; break into smaller method

---
 app/support/apis/awesome_commerce.rb       | 39 ++++++++++++++--------------
 spec/support/apis/awesome_commerce_spec.rb | 41 ++++++++++++++++++++----------
 2 files changed, 47 insertions(+), 33 deletions(-)

diff --git a/app/support/apis/awesome_commerce.rb b/app/support/apis/awesome_commerce.rb
index 61be997..6ea162b 100644
--- a/app/support/apis/awesome_commerce.rb
+++ b/app/support/apis/awesome_commerce.rb
@@ -1,30 +1,16 @@
 module Apis
   class AwesomeCommerce

     def get_payment_history_from_email(email)
-      order_ids = get_order_ids_from_email(email)
       payments = []

-      order_ids.each do |order_id|
-        order = order(number: order_id)
+      order_numbers(email: email).each do |order_number|
+        order = order(number: order_number)

         payments += order[&#39;order_lines&#39;].map do |order_line|
           next if order_line[&#39;state&#39;] == &#39;migrated_to_zuora&#39;
-
-          amount =  &amp;quot;#{order_line[&#39;amount_currency&#39;]}$&amp;quot;
-          amount += &amp;quot;#{(order_line[&#39;amount_paid&#39;] / 100.0).round}&amp;quot;
-          date = order_line[&#39;created_at&#39;].to_date.try(:strftime, &#39;%e %b %Y&#39;)
-
-          {
-            amount:         amount,
-            payment_date:   date,
-            product_order:  order_id,
-            product_name:   order_line.dig(&#39;bundle&#39;, &#39;name&#39;),
-            billing_method: nil, #todo no awc api for this yet
-            receipt_url:    nil  #todo no such feature in awc
-          }
+          summarize_order_line(order_number, order_line)
         end
       end
       payments
@@ -42,9 +28,24 @@ module Apis
       JSON.parse(payload.body)
     end

-    def get_order_ids_from_email(email)
+    def order_numbers(email:)
       payload = from_customer(email: email)
       payload[&#39;orders&#39;].map { |order| order[&#39;number&#39;] }
     end
+
+    def summarize_order_line(order_number, order_line)
+      amount =  &amp;quot;#{order_line[&#39;amount_currency&#39;]}$&amp;quot;
+      amount += &amp;quot;#{(order_line[&#39;amount_paid&#39;] / 100.0).round}&amp;quot;
+      date = order_line[&#39;created_at&#39;].to_date.try(:strftime, &#39;%e %b %Y&#39;)
+
+      {
+        amount:         amount,
+        payment_date:   date,
+        product_order:  order_number,
+        product_name:   order_line.dig(&#39;bundle&#39;, &#39;name&#39;),
+        billing_method: nil, #todo no awc api for this yet
+        receipt_url:    nil  #todo no such feature in awc
+      }
+    end
   end
 end
diff --git a/spec/support/apis/awesome_commerce_spec.rb b/spec/support/apis/awesome_commerce_spec.rb
index b663eed..16bb4c1 100644
--- a/spec/support/apis/awesome_commerce_spec.rb
+++ b/spec/support/apis/awesome_commerce_spec.rb
@@ -4,6 +4,8 @@ require &#39;active_support/core_ext/hash&#39;

 describe Apis::AwesomeCommerce do
   Given(:klass) { Apis::AwesomeCommerce }
+  Given(:instance) { klass.new }
+  Given(:customer_email) { &#39;john@example.com&#39; }
   before do
     stub_const(&#39;AWC_CLIENT&#39;,
       Faraday.new(url: &#39;redacted&#39;)
@@ -288,8 +290,6 @@ describe Apis::AwesomeCommerce do
   end

-  describe &#39;#get_order_ids_from_email&#39; do
-    Given(:instance) { klass.new }
-    Given(:customer_email) { &#39;john@example.com&#39; }
-
+  describe &#39;#order_numbers&#39; do
     Given do
       allow_any_instance_of(klass).to(
         receive(:from_customer).with(email: customer_email)
@@ -337,15 +334,31 @@ describe Apis::AwesomeCommerce do
       )
     end

-    When(:result) { instance.send(:get_order_ids_from_email, customer_email) }
+    When(:result) { instance.send(:order_numbers, email: customer_email) }

     Then { result == [&#39;redacted&#39;] }
   end

+  describe &#39;#summarize_order_line&#39; do
+    Given(:order_number) { &#39;redacted&#39; }
+    Given(:order_line) { JSON.parse(order_payload).dig(&#39;order_lines&#39;, 0) }
+    Given(:amount_paid) { (order_line[&#39;amount_paid&#39;] / 100.0).round }
+
+    When(:payment_summary) do
+      instance.summarize_order_line(order_number, order_line)
+    end
+
+    Then { payment_summary[:amount] =~ /^#{order_line[&#39;amount_currency&#39;]}/ }
+    Then { payment_summary[:amount] =~ /#{amount_paid}$/ }
+    Then { payment_summary[:payment_date].to_date.kind_of? Date }
+    Then { payment_summary[:product_order] == order_number }
+    Then { payment_summary[:product_name] == order_line.dig(&#39;bundle&#39;, &#39;name&#39;) }
+    Then { payment_summary.keys.include?(:billing_method) }
+    Then { payment_summary.keys.include?(:receipt_url) }
+  end

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are a couple of things are going on here:&lt;/p&gt;

&lt;h3 id=&#34;inline-method-http-refactoring-com-catalog-inlinemethod-html&#34;&gt;Inline method (&lt;a href=&#34;http://refactoring.com/catalog/inlineMethod.html&#34;&gt;http://refactoring.com/catalog/inlineMethod.html&lt;/a&gt;)&lt;/h3&gt;

&lt;p&gt;Take a look at this section of the diff:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;-      order_ids = get_order_ids_from_email(email)
       payments = []

-      order_ids.each do |order_id|
-        order = order(number: order_id)
+      order_numbers(email: email).each do |order_number|
+        order = order(number: order_number)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see that instead of creating a new variable to get order numbers from an email (which feels very procedural) he instead iterated over the results of the method call itself, as if it&amp;rsquo;s just another variable.&lt;/p&gt;

&lt;p&gt;When you have very descriptive method names, inlining like this can actually add to the expressiveness of your code.&lt;/p&gt;

&lt;h3 id=&#34;extract-method-http-refactoring-com-catalog-extractmethod-html&#34;&gt;Extract method (&lt;a href=&#34;http://refactoring.com/catalog/extractMethod.html&#34;&gt;http://refactoring.com/catalog/extractMethod.html&lt;/a&gt;)&lt;/h3&gt;

&lt;p&gt;In this case, the operations inside the loop were taken out of the loop and put in a seperate method. This makes the loop a lot clearer because at one glance we can see that it loops through order lines and generates an array of summarized order lines.&lt;/p&gt;

&lt;p&gt;What makes it even cooler is that because he extracted out the method, he can test it separately&amp;ndash;now that&amp;rsquo;s a proper unit test.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>A Strange Case of Inheritance Behavior</title>
      <link>http://life.beyondrails.com/blog/2016/04/14/a-strange-case-of-inheritance-behavior/</link>
      <pubDate>Thu, 14 Apr 2016 20:27:59 +0800</pubDate>
      
      <guid>http://life.beyondrails.com/blog/2016/04/14/a-strange-case-of-inheritance-behavior/</guid>
      <description>&lt;p&gt;While working some code to work with the Zuora SOAP API, I got bit by a strange case of inheritance behavior. It would seem that this is related to what &lt;code&gt;self&lt;/code&gt; is bound to during the execution of the statement. Here it is, distilled to its essentials:

&lt;script&gt;
$(function() {
    $(&#39;.ruby-code&#39;).opalBox();
  var $targets = $(&#34;.ruby-code textarea&#34;)
  $targets.each(function() {
    $(this).height(0).height(this.scrollHeight - $(this).css(&#34;font-size&#34;).replace(&#39;px&#39;,&#39;&#39;)).change();
  })
});
&lt;/script&gt;
&lt;/p&gt;

&lt;div class=&#34;ruby-code&#34;&gt;
class Parent
  def self.foo
    &#34;parent foo&#34;
  end

  def self.bar
    puts &#34;parent bar&#34;
    puts self.foo
  end
end

class Child &lt; Parent
  def self.foo
    puts &#34;child foo&#34;
  end

  def self.bar
    puts &#34;child bar&#34;
    super
  end
end

puts Child.bar
&lt;/div&gt;

&lt;p&gt;Intuition will tell you that when you call &lt;code&gt;Child.bar&lt;/code&gt;, since the method called &lt;code&gt;super&lt;/code&gt; you would remain in the &lt;code&gt;Parent&lt;/code&gt; context. So when the &lt;code&gt;Parent.bar&lt;/code&gt; method called &lt;code&gt;self.foo&lt;/code&gt; you would expect it to be kept in the same context.&lt;/p&gt;

&lt;p&gt;This is in fact not the case; it is as if the binding of &lt;code&gt;self&lt;/code&gt; remains with the &lt;code&gt;Child&lt;/code&gt; class, that is why even if the &lt;code&gt;self.foo&lt;/code&gt; was called in the &lt;code&gt;Parent&lt;/code&gt; class the &lt;code&gt;Child.foo&lt;/code&gt; was called instead.&lt;/p&gt;

&lt;p&gt;I asked my colleague &lt;a href=&#34;http://aaronmyatt.github.io/&#34;&gt;Aaron&lt;/a&gt; who was once a Python programmer to give me an equivalent Python code to run:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Parent(object):
	def foo(self):
		print(&amp;quot;Parent foo&amp;quot;)
	def bar(self):
		print(&amp;quot;Parent bar&amp;quot;)
		return self.foo()

​class Child(Parent):
	def foo(self):
		print(&amp;quot;Child foo&amp;quot;)
	def bar(self):
		print(&amp;quot;Child bar&amp;quot;)
		return super(Child, self).bar()

c = Child()
print(c.bar())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the output was the same:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Child bar
Parent bar
Child foo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;rsquo;m not an expert Javascript programmer so I&amp;rsquo;m curious how an equivalent program would behave under Javascript.&lt;/p&gt;

&lt;h3 id=&#34;update&#34;&gt;Update:&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://www.facebook.com/noob.kido&#34;&gt;Lee Siong Tai&lt;/a&gt; kindly provided me a fiddle here: &lt;a href=&#34;http://www.es6fiddle.net/in0c3zsi/&#34;&gt;http://www.es6fiddle.net/in0c3zsi/&lt;/a&gt; and interestingly, it shows the same behavior.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.facebook.com/jimmyngu&#34;&gt;Jimmy Ngu&lt;/a&gt; also has some interesting links, go check out our discussion at &lt;a href=&#34;https://www.facebook.com/groups/klxrb/permalink/792231597575468/&#34;&gt;https://www.facebook.com/groups/klxrb/permalink/792231597575468/&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>2016 04 08 Linklog</title>
      <link>http://life.beyondrails.com/blog/2016/04/08/2016-04-08-linklog/</link>
      <pubDate>Fri, 08 Apr 2016 11:44:28 +0800</pubDate>
      
      <guid>http://life.beyondrails.com/blog/2016/04/08/2016-04-08-linklog/</guid>
      <description>&lt;p&gt;Here&amp;rsquo;s this week&amp;rsquo;s linklog:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Producing Documentation for your Rails API&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;The Making of an Expert&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;Apprenticeship Patterns&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;So Good They Can&amp;rsquo;t Ignore You&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;Architecture: the Lost Years&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&#34;hugomore42&#34;&gt;&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Producing Documentation for your Rails API&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&#34;https://blog.codeship.com/producing-documentation-for-your-rails-api&#34;&gt;https://blog.codeship.com/producing-documentation-for-your-rails-api&lt;/a&gt;&lt;br /&gt;
We&amp;rsquo;re doing a lot of new software at work, and most of them are APIs to help out with task parallelization. Here&amp;rsquo;s a really good article to help guide everyone on the team on producing good API documentation.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;The Making of an Expert&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&#34;https://hbr.org/2007/07/the-making-of-an-expert&#34;&gt;https://hbr.org/2007/07/the-making-of-an-expert&lt;/a&gt;&lt;br /&gt;
Lately I&amp;rsquo;ve been spending time on self-improvement, and the question I find asking myself now is: How do I achieve mastery? This is an old article from the Harvard Business Review, but the lessons in there are timeless.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Apprenticeship Patterns&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&#34;http://chimera.labs.oreilly.com/books/1234000001813/index.html&#34;&gt;http://chimera.labs.oreilly.com/books/1234000001813/index.html&lt;/a&gt; (online book)
&lt;a href=&#34;http://amzn.to/1RTFx8n&#34;&gt;http://amzn.to/1RTFx8n&lt;/a&gt; (amazon link)&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve been recommending this book for all new hires at my company, and I&amp;rsquo;ve learned a lot from the book myself. Definitely a must read.&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;So Good They Can&amp;rsquo;t Ignore You&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&#34;http://amzn.to/1qaX6cI&#34;&gt;http://amzn.to/1qaX6cI&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m currently reading this book and it&amp;rsquo;s been an interesting read so far. The author argues that the belief of following your passion is a dangerous advice, and that you need to save up enough &amp;ldquo;career capital&amp;rdquo; before you can get meaningful work with autonomy and control.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Architecture: the Lost Years&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=WpkDN78P884&#34;&gt;https://www.youtube.com/watch?v=WpkDN78P884&lt;/a&gt; (video)&lt;/p&gt;

&lt;p&gt;Uncle Bob Martin makes the case for &amp;ldquo;pluggable architecture&amp;rdquo; where your business logic is separated from your delivery mechanism and persistence layers. The ideas presented will challenge how you think about your application.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;That&amp;rsquo;s it for the link log!&lt;/p&gt;

&lt;p&gt;Full disclosure: the links to Amazon above are affiliate links. That doesn&amp;rsquo;t mean the books are of poor quality; on the contrary I would really recommend that you go and check them out because they will really take you to the next level.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Javascript Training at Mindvalley Day 2</title>
      <link>http://life.beyondrails.com/blog/2016/03/18/javascript-training-at-mindvalley-day-2/</link>
      <pubDate>Fri, 18 Mar 2016 15:54:40 +0800</pubDate>
      
      <guid>http://life.beyondrails.com/blog/2016/03/18/javascript-training-at-mindvalley-day-2/</guid>
      <description>&lt;p&gt;We&amp;rsquo;ve commissioned &lt;a href=&#34;http://www.dekatku.com/&#34;&gt;Dekatku&lt;/a&gt; to train some developers here at &lt;a href=&#34;http://www.mindvalley.com/&#34;&gt;Mindvalley&lt;/a&gt; on Javascript, and it&amp;rsquo;s been a great experience so far! Today is Day 2 of the the training and we&amp;rsquo;ve covered some really deep topics.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve started &lt;a href=&#34;https://www.safaribooksonline.com/library/view/apprenticeship-patterns/9780596806842/ch02s02.html&#34;&gt;wearing my whitebelt&lt;/a&gt; again and I thought I&amp;rsquo;ll put up my thoughts and notes here for future reference.

At the start of the session we had one hour to make a TODO application. The caveat being that we&amp;rsquo;re not allowed to use any libraries or frameworks; just pure javascript.&lt;/p&gt;

&lt;p&gt;How did it go? I realized (yet again) that raw javascript is very verbose! I looked at the output of my code and there was so much &lt;code&gt;document.getElementById()&lt;/code&gt; calls everywhere.&lt;/p&gt;

&lt;p&gt;I knew what to do, but I didn&amp;rsquo;t have the vocabulary to express it.&lt;/p&gt;

&lt;p&gt;I found that it was good to go back to fundamentals and try to rebuild what you&amp;rsquo;ve been using utilizing only the basic building blocks of the technology. It gave me a better appreciation of the work that libraries and frameworks saved me, but more importantly: &lt;strong&gt;it gave me the confidence to walk by myself without a crutch&lt;/strong&gt;; whatever these libraries are doing isn&amp;rsquo;t magical anymore, and I can rebuild (or debug) them myself.&lt;/p&gt;

&lt;p&gt;We then went on to the two different types of expressions in Javascript:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;expression&lt;/code&gt; =&amp;gt; produces a value&lt;/li&gt;
&lt;li&gt;&lt;code&gt;statement&lt;/code&gt; =&amp;gt; performs an action&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For some reason it reminded me of the &lt;a href=&#34;http://martinfowler.com/bliki/CommandQuerySeparation.html&#34;&gt;command/query separation&lt;/a&gt; by Bertrand Meyer.&lt;/p&gt;

&lt;p&gt;Of course, what&amp;rsquo;s some Javascript without surprising behavior:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Javascript&#34;&gt;{} + []
//=&amp;gt; 0 but it&#39;s an [object Object] so it&#39;s true(thy)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Good piece of advice: &lt;strong&gt;deal with an exception, or throw it back out&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Some food for thought by Tim when I asked a question about whether you can catch hierarchichal errors:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;The answer is no, but yes.&amp;rdquo; &amp;ndash; Timothy&lt;/p&gt;

&lt;p&gt;[Like everything else in Javascript, it would seem. &amp;ndash; Tristan]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Fun facts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;every function in javascript is variadic&lt;/li&gt;
&lt;li&gt;javascript has a &amp;ldquo;moveable&amp;rdquo; &lt;code&gt;this&lt;/code&gt; (functions can be bound to any object)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;More syntactic sugar:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Javascript&#34;&gt;x.foo(args) =&amp;gt; x.foo.call(x, args)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;call&lt;/code&gt; function from &lt;code&gt;Function.prototype&lt;/code&gt; sounds very much like &lt;code&gt;#instance_exec&lt;/code&gt; from Ruby.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call&#34;&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.bigbinary.com/2010/05/28/instance-exec-changing-self-and-parameters-to-proc.html&#34;&gt;http://blog.bigbinary.com/2010/05/28/instance-exec-changing-self-and-parameters-to-proc.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Words of warning: Don&amp;rsquo;t mess with the global scope. That&amp;rsquo;s why we have this pattern:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Javascript&#34;&gt;(function(){})();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we have lunch :)&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;After lunch, things get more exciting as we start diving deeper into the Javascript object model.&lt;/p&gt;

&lt;p&gt;Javascript has no formal notion of classes and inheritance, but you can make it behave similar to that:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Javascript&#34;&gt;function LifeForm() {
  this.name = &amp;quot;&amp;quot;;
  this.description = &amp;quot;&amp;quot;;
  this.setName = function(name) {
    this.name = name;
  };
  this.getName = function() {
    return this.name;
  };
};
var lifeForm = new LifeForm();

function Human() {
  LifeForm.call(this);
  this.arms = 2;
  this.legs = 2;
};

Human.prototype = Object.create(LifeForm.prototype);
// =&amp;gt; this changes the class &amp;quot;definition&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;More words of wisdom:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Managing scope in OOJavasctipt is very important, especially in async code (which use callbacks a lot) &amp;ndash; Björn&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Surprising stuff: you can change an object&amp;rsquo;s prototype and it will change all objects derived from that prototype, even ones that&amp;rsquo;s already been created.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Javascript&#34;&gt;var baz = function bar() { }
Function.prototype.foo = function() {
  console.log(&amp;quot;hello!&amp;quot;);
}
baz.foo();
//=&amp;gt; hello
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is very similar to how ruby works with &lt;code&gt;#class_eval&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Ruby&#34;&gt;class Bar; end;
Class.class_eval do
  def foo
    puts &amp;quot;hello&amp;quot;
  end
end
Bar.foo #=&amp;gt; &amp;quot;hello&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that even though the class &lt;code&gt;Bar&lt;/code&gt; was created &lt;em&gt;before&lt;/em&gt; we reopened the class &lt;code&gt;Class&lt;/code&gt; (which in Ruby is similar to the prototype of the object &lt;code&gt;Function&lt;/code&gt;) it still managed to call the &lt;code&gt;#foo&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;What&amp;rsquo;s a class without Homework:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Using everything you&amp;rsquo;ve learnt today, create a set of classes which represent vehicles.&lt;/li&gt;
&lt;li&gt;Must have 3 levels hierarchy.&lt;/li&gt;
&lt;li&gt;Submit by Wednesday 23 March.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;Super thanks to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Björn Karge &lt;a href=&#34;https://www.linkedin.com/in/bjornkarge&#34;&gt;https://www.linkedin.com/in/bjornkarge&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Timothy Chandler &lt;a href=&#34;https://www.linkedin.com/in/timothy-chandler-7625b823&#34;&gt;https://www.linkedin.com/in/timothy-chandler-7625b823&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Answer the Question</title>
      <link>http://life.beyondrails.com/zen/answer-the-question</link>
      <pubDate>Fri, 19 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>http://life.beyondrails.com/zen/answer-the-question</guid>
      <description>&lt;p&gt;The Student was arguing with his Colleague about a piece of code they have written.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Master, please settle our argument,&amp;rdquo; the student said. &amp;ldquo;My Colleague insists that the return value of a method should always be an object.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;The Master was expressionless. After some a few minutes, he finally replied. &amp;ldquo;Nil.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;The Student&amp;rsquo;s face contorted into a frown, for he was confused at the Master&amp;rsquo;s reply. &amp;ldquo;Master, I don&amp;rsquo;t understand,&amp;rdquo; he stammered. &amp;ldquo;You haven&amp;rsquo;t answered my question!&amp;rdquo;&lt;/p&gt;

&lt;p&gt;The Student&amp;rsquo;s face then slowly lit up, for he finally understood.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Higher</title>
      <link>http://life.beyondrails.com/zen/higher</link>
      <pubDate>Thu, 18 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>http://life.beyondrails.com/zen/higher</guid>
      <description>&lt;p&gt;The Master saw the Student bewildered. Apparently, the Client complained that the temple construction being supervised by the Student is not going according to spec.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;I don&amp;rsquo;t get it,&amp;rdquo; the Student sighed, &amp;ldquo;the specs are right here; they are clear, complete, and in black and white. How can he tell me that I&amp;rsquo;m not following the specs?&amp;rdquo;&lt;/p&gt;

&lt;p&gt;The Master replied &amp;ldquo;I will answer your question, but first you must help me hang a portrait. I am old and frail, and do not have the strength to put a portrait up a wall.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;When they reached the Master&amp;rsquo;s dwelling, the Master began giving instructions. &amp;ldquo;I need it to be about this high. Around the height of my eyes,&amp;rdquo; she said.&lt;/p&gt;

&lt;p&gt;The Student started to move the portrait up and down while listening to the Master&amp;rsquo;s feedback. An hour has passed, and the Student still saw dissatisfaction in the Master&amp;rsquo;s face. Concerned that he wasn&amp;rsquo;t doing a good job, he asked &amp;ldquo;you still ask me to put the portrait higher. Isn&amp;rsquo;t the portrait high enough?&amp;rdquo;&lt;/p&gt;

&lt;p&gt;The Master shook his head, stamped her foot, and growled &amp;ldquo;higher!&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&amp;ldquo;But Master,&amp;rdquo; the Student stammered, &amp;ldquo;the portrait is almost at the ceiling! I can&amp;rsquo;t put it up any higher.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&amp;ldquo;I didn&amp;rsquo;t tell you to increase the height at which you place the portrait,&amp;rdquo; the Master retorted.&lt;/p&gt;

&lt;p&gt;The Student&amp;ndash;visibly confounded&amp;ndash;pleadingly asked &amp;ldquo;then what was it that you wanted me to do?&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&amp;ldquo;When the portrait was too low, you said &amp;lsquo;higher.&amp;rsquo; When the portrait was near the height of your eyes, you said &amp;lsquo;yes, but a little bit higher.&amp;rsquo; When the portrait was a bit over the height of your eyes, you said &amp;lsquo;no, go back higher.&amp;rsquo; When the portrait was too far away from the agreed on height, you said &amp;lsquo;no, I want it higher!&amp;rsquo; and this time more vigorously. I don&amp;rsquo;t understand what you mean when you say &amp;lsquo;higher&amp;rsquo;!&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Suddenly, the Student was enlightened.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Easy Path</title>
      <link>http://life.beyondrails.com/zen/the-easy-path</link>
      <pubDate>Wed, 17 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>http://life.beyondrails.com/zen/the-easy-path</guid>
      <description>&lt;p&gt;One night during a walk, the Master visited the Student during a project. &amp;ldquo;Master,&amp;rdquo; the Student said, &amp;ldquo;why do we have to write a failing test that exposes a bug before fixing the bug itself? Isn&amp;rsquo;t it easier to just fix the bug; our Client has complained about it, I&amp;rsquo;ve tried reproducing it myself, other colleagues can reproduce it too. It&amp;rsquo;s plain as day that the bug exists.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;The Master then asked the Student for a favor. &amp;ldquo;I have lost my spectacles and have been trying to search for them for hours. Will you help me find them?&amp;rdquo; The Student, sensing the chance to be useful, immediately agreed.&lt;/p&gt;

&lt;p&gt;The Master led the student to a brightly lit room and said &amp;ldquo;please search here.&amp;rdquo; The Student then went on all fours and methodically went through every nook and cranny. This went on for hours, until the Student gave up and said &amp;ldquo;I&amp;rsquo;m sorry Master, I do not think your spectacles are here.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Sighing, the Master whispered &amp;ldquo;that might as well be, since the last time I saw my spectacles was inside that dark room over there where the sun&amp;rsquo;s light never reaches.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Exasperated, the Student exclaimed &amp;ldquo;Master, I do not understand. Why did you ask me to search here when you very well know you lost your spectacles over there?&amp;rdquo;&lt;/p&gt;

&lt;p&gt;In an apologetic tone, the Master explained &amp;ldquo;because I thought it would be easier for you if you can search when there is light.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;The Student was visibly irritated. &amp;ldquo;Master! That is stupid. I could very well just bring a lamp into the dark room.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;With this, the Student was enlightened.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>String Interpolation with Templates Using String#</title>
      <link>http://life.beyondrails.com/blog/2016/02/05/string-interpolation-with-templates-using-string/</link>
      <pubDate>Fri, 05 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>http://life.beyondrails.com/blog/2016/02/05/string-interpolation-with-templates-using-string/</guid>
      <description>&lt;p&gt;I was working on a feature for &lt;a href=&#34;https://github.com/parasquid/upcloudify&#34;&gt;upcloudify&lt;/a&gt; that will use Slack notifications instead of email notifications. One of the challenges I faced was how to build-in flexibility for generating messages. I would want that the user be able to provide their own custom notification message, but at the same time be able to provide placeholders for items like the S3 download link.

&lt;script&gt;
$(function() {
    $(&#39;.ruby-code&#39;).opalBox();
  var $targets = $(&#34;.ruby-code textarea&#34;)
  $targets.each(function() {
    $(this).height(0).height(this.scrollHeight - $(this).css(&#34;font-size&#34;).replace(&#39;px&#39;,&#39;&#39;)).change();
  })
});
&lt;/script&gt;
&lt;/p&gt;

&lt;p&gt;I initially thought of using an &lt;code&gt;ERB&lt;/code&gt; template but then realized it will be far too overkill for this simple purpose. I actually just needed to have the caller be able to provide a template string, and then merge certain variables into this template string.&lt;/p&gt;

&lt;p&gt;I started playing around with regexes when I came upon &lt;a href=&#34;http://ruby-doc.org/core-2.2.0/String.html#method-i-25&#34;&gt;String#%&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From the documentation:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Format—Uses &lt;em&gt;str&lt;/em&gt; as a format specification, and returns the result of applying it to &lt;em&gt;arg&lt;/em&gt;. If the format specification contains more than one substitution, then &lt;em&gt;arg&lt;/em&gt; must be an &lt;code&gt;Array&lt;/code&gt; or &lt;code&gt;Hash&lt;/code&gt; containing the values to be substituted. See &lt;code&gt;Kernel::sprintf&lt;/code&gt; for details of the format string.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;&amp;quot;%05d&amp;quot; % 123                              #=&amp;gt; &amp;quot;00123&amp;quot;
&amp;quot;%-5s: %08x&amp;quot; % [ &amp;quot;ID&amp;quot;, self.object_id ]   #=&amp;gt; &amp;quot;ID   : 200e14d6&amp;quot;
&amp;quot;foo = %{foo}&amp;quot; % { :foo =&amp;gt; &#39;bar&#39; }        #=&amp;gt; &amp;quot;foo = bar&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I thought this was very cool. Let me show you what I mean:&lt;/p&gt;

&lt;div class=&#34;ruby-code&#34;&gt;
template = &#34;Hello %s!&#34;

puts template % &#34;World&#34;
&lt;/div&gt;

&lt;p&gt;You can also use an array to feed the template:&lt;/p&gt;

&lt;div class=&#34;ruby-code&#34;&gt;
template = &#34;Because Oct %o = Dec %d&#34;

puts &#34;Why do programmers always mix up Halloween and Christmas?&#34;
puts template % [25, 25]
&lt;/div&gt;

&lt;p&gt;For an even better template that doesn&amp;rsquo;t depend on the order of the elements, you can feed in a &lt;code&gt;Hash&lt;/code&gt;:
&lt;div class=&#34;ruby-code&#34;&gt;
template = &#34;
Q: What&#39;s the %{programming_paradigm} way to become wealthy?
A: %{answer}&#34;

puts template % {programming_paradigm: &#34;Object Oriented&#34;, answer: &#34;Inheritance&#34;}
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Sadly, OpalBox doesn&amp;rsquo;t seem to work well with this particular usage of &lt;code&gt;String#%&lt;/code&gt; since &lt;a href=&#34;https://github.com/opal/opal/issues/678&#34;&gt;Opal 0.7.1 has a bug&lt;/a&gt; where it doesn&amp;rsquo;t properly interpolate named parameters (I&amp;rsquo;ve already &lt;a href=&#34;https://github.com/Angelmmiguel/opalbox-jquery/issues/3&#34;&gt;reported this&lt;/a&gt; to the opalbox author). I will update this article whenever the issues have been ironed out.&lt;/p&gt;

&lt;p&gt;Runnning the code in &lt;code&gt;IRB&lt;/code&gt; works however:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;puts template % {programming_paradigm: &amp;quot;Object Oriented&amp;quot;, answer: &amp;quot;Inheritance&amp;quot;}
Q: What&#39;s the Object Oriented way to become wealthy?
A: Inheritance
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The method is also written in C (at least for MRI) so it&amp;rsquo;s expected to be fast.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;puts Benchmark.measure { &amp;quot;Hello %s&amp;quot; % &amp;quot;World&amp;quot; * 6_000_000}
  0.010000   0.040000   0.050000 (  0.051013)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the end the code for the feature I was working on looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# gem source
def upload_and_notify(filename: nil, attachment: nil, message: &amp;quot;%s&amp;quot;)
  raise ArgumentError &amp;quot;filename cannot be nil&amp;quot; unless filename
  raise ArgumentError &amp;quot;attachment cannot be nil&amp;quot; unless attachment

  expiration = (Date.today + 7).to_time
  file = @uploader.upload(filename, attachment)
  @notifier.notify(text: message % file.url(expiration))
end

# spec file
context &amp;quot;the notification can merge the file url&amp;quot; do
  When { expect(notifier).to receive(:notify).with({text: &amp;quot;your report &amp;lt;filename link&amp;gt;&amp;quot;}) }
  Then {
    expect {
      instance.upload_and_notify(filename: &#39;abc&#39;, attachment: &#39;123&#39;, message: &amp;quot;your report &amp;lt;%s&amp;gt;&amp;quot;)
    }.not_to raise_error
  }
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;see-also&#34;&gt;See also:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://ruby-doc.org/core-2.2.0/String.html#method-i-25&#34;&gt;http://ruby-doc.org/core-2.2.0/String.html#method-i-25&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ruby-doc.org/core-2.2.0/Kernel.html#method-i-sprintf&#34;&gt;http://ruby-doc.org/core-2.2.0/Kernel.html#method-i-sprintf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.revathskumar.com/2013/01/ruby-multiple-string-substitution-in-string-template.html&#34;&gt;http://blog.revathskumar.com/2013/01/ruby-multiple-string-substitution-in-string-template.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://davebaker.me/articles/tip-ruby-string-interpolation-with-hashes&#34;&gt;http://davebaker.me/articles/tip-ruby-string-interpolation-with-hashes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;tldr&#34;&gt;TLDR;&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;String#%&lt;/code&gt; is a cool and flexible way to store a template in a string so you can defer the string interpolation.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Opalbox—Run Ruby Code Inside Pages</title>
      <link>http://life.beyondrails.com/blog/2016/01/03/opalboxrun-ruby-code-inside-pages/</link>
      <pubDate>Sun, 03 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>http://life.beyondrails.com/blog/2016/01/03/opalboxrun-ruby-code-inside-pages/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://opalrb.org/&#34;&gt;Opal&lt;/a&gt; is a Ruby to JavaScript compiler, and &lt;a href=&#34;https://github.com/Angelmmiguel/opalbox-jquery&#34;&gt;OpalBox&lt;/a&gt; is a &lt;code&gt;jQuery&lt;/code&gt; plugin to easily create a textarea that can take ruby code and allow it to run.&lt;/p&gt;

&lt;p&gt;I just added OpalBox to this blog and it&amp;rsquo;s been quite interesting. I&amp;rsquo;ve learned how to resize a &lt;code&gt;textarea&lt;/code&gt; based on its content (you need javascript to do that because &lt;code&gt;CSS&lt;/code&gt; just doesn&amp;rsquo;t cut it) and I&amp;rsquo;ve added in a shortcode.&lt;/p&gt;

&lt;h3 id=&#34;update&#34;&gt;update:&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Angelmmiguel/opalbox-jquery&#34;&gt;Angelmmiguel&lt;/a&gt; (the author of opalbox) has just released &lt;a href=&#34;https://github.com/Angelmmiguel/opalbox-jquery/issues/1&#34;&gt;0.1.0 that fixes the issue&lt;/a&gt; :)

&lt;script&gt;
$(function() {
    $(&#39;.ruby-code&#39;).opalBox();
  var $targets = $(&#34;.ruby-code textarea&#34;)
  $targets.each(function() {
    $(this).height(0).height(this.scrollHeight - $(this).css(&#34;font-size&#34;).replace(&#39;px&#39;,&#39;&#39;)).change();
  })
});
&lt;/script&gt;
&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s how it looks like:&lt;/p&gt;

&lt;div class=&#34;ruby-code&#34;&gt;
# this is ruby code
# it is inside a text area so you can edit it and play around with it

def square(x)
  x ** 2
end

puts square(256)

# click on run below to execute the code
&lt;/div&gt;

&lt;p&gt;I&amp;rsquo;ve edited one of my &lt;a href=&#34;http://life.beyondrails.com/blog/2014/03/04/ruby-and-blocks/&#34;&gt;past articles&lt;/a&gt; to use &lt;code&gt;OpalBox&lt;/code&gt; if you&amp;rsquo;re interested in how it looks like as a method for instruction.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the javascript snippet that resizes the &lt;code&gt;textarea&lt;/code&gt; to fit its content:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var $targets = $(&amp;quot;.ruby-code textarea&amp;quot;)
$targets.each(function() {
  $(this).height(0).height(this.scrollHeight - $(this).css(&amp;quot;font-size&amp;quot;).replace(&#39;px&#39;,&#39;&#39;)).change();
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;height&lt;/code&gt; is first set to &lt;code&gt;0&lt;/code&gt; because some browsers get confused with unconventional positions (negative margins, for example). It is then set to the &lt;code&gt;textarea&lt;/code&gt;&amp;rsquo;s &lt;code&gt;scrollHeight&lt;/code&gt;. I then subtract the &lt;code&gt;font-size&lt;/code&gt; of this element to remove the extra line at the end.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gohugo.io/extras/shortcodes/&#34;&gt;Shortcodes in Hugo&lt;/a&gt; (the blog engine this site is running on) is quite simple to make. It&amp;rsquo;s just a &lt;code&gt;text&lt;/code&gt; snippet that you can call within your article. For example, the above &lt;code&gt;OpalBox&lt;/code&gt; looks like this:&lt;/p&gt;

&lt;pre&gt;
&amp;#123;&amp;#123;&amp;lt; rubycode &amp;gt;&amp;#125;&amp;#125;
# this is ruby code
# it is inside a text area so you can edit it and play around with it

def square(x)
  x ** 2
end

puts square(256)

# click on run below to execute the code
&amp;#123;&amp;#123;&amp;lt; /rubycode &amp;gt;&amp;#125;&amp;#125;
&lt;/pre&gt;

&lt;p&gt;While the shortcode file contents (&lt;code&gt;rubycode.html&lt;/code&gt;) look like this:&lt;/p&gt;

&lt;pre&gt;
&amp;lt;div class=&#34;ruby-code&#34;&amp;gt;&amp;#123;&amp;#123; .Inner &amp;#125;&amp;#125;&amp;lt;/div&amp;gt;
&lt;/pre&gt;

&lt;p&gt;I also have the &lt;code&gt;opalbox.html&lt;/code&gt; shortcode that I only include whenever the article contains an &lt;code&gt;OpalBox&lt;/code&gt;. It first runs the &lt;code&gt;.opalBox()&lt;/code&gt; function on all &lt;code&gt;div&lt;/code&gt; that have the class &lt;code&gt;.ruby-code&lt;/code&gt; and turn them into &lt;code&gt;textarea&lt;/code&gt;. Then the &lt;code&gt;textarea&lt;/code&gt; are resized to fit their contents.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$(function() {
  $(&#39;.ruby-code&#39;).opalBox();
  var $targets = $(&amp;quot;.ruby-code textarea&amp;quot;)
  $targets.each(function() {
    $(this).height(0).height(this.scrollHeight - $(this).css(&amp;quot;font-size&amp;quot;).replace(&#39;px&#39;,&#39;&#39;)).change();
  })
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;what-i-like&#34;&gt;What I like&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;It&amp;rsquo;s great for tutorial articles that explain complicated concepts.&lt;/li&gt;
&lt;li&gt;The reader can play and manipulate the code to confirm understanding.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;what-i-don-t-like&#34;&gt;What I don&amp;rsquo;t like&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;textarea&lt;/code&gt; disables syntax highlighting.&lt;/li&gt;
&lt;li&gt;Long ruby code is not practical because it looks like a wall of text.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;references&#34;&gt;References:&lt;/h2&gt;

&lt;p&gt;Initial change to the article to include opalbox: &lt;a href=&#34;https://github.com/parasquid/life.beyondrails.com/commit/996234fffc57a8e16ce7015abc00e3a374f00343&#34;&gt;https://github.com/parasquid/life.beyondrails.com/commit/996234fffc57a8e16ce7015abc00e3a374f00343&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Changing the divs into a shortcode: &lt;a href=&#34;https://github.com/parasquid/life.beyondrails.com/commit/20fe9761d285c448498ce5a1faef5f70edceed5a&#34;&gt;https://github.com/parasquid/life.beyondrails.com/commit/20fe9761d285c448498ce5a1faef5f70edceed5a&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Exploring Query Objects</title>
      <link>http://life.beyondrails.com/blog/2015/12/18/exploring-query-objects/</link>
      <pubDate>Fri, 18 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>http://life.beyondrails.com/blog/2015/12/18/exploring-query-objects/</guid>
      <description>&lt;p&gt;A &lt;a href=&#34;http://blog.codeclimate.com/blog/2012/10/17/7-ways-to-decompose-fat-activerecord-models/&#34;&gt;CodeClimate Article&lt;/a&gt; gave a number of ways to decompose fat ActiveRecord models, and one of them was: &lt;strong&gt;Extract Query Objects&lt;/strong&gt;. I&amp;rsquo;ve been trying to explore and get myself familiar with a good standard of how to implement Query Objects, and here is my take.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll be trying out a new format in these articles. I&amp;rsquo;ll be using something of a Q/A style similar to &lt;a href=&#34;https://en.wikipedia.org/wiki/Socratic_questioning&#34;&gt;Socratic Questioning&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Here is one of the Query Objects I have in one of my production apps:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;module Subscription
  module Calculations
    class OrderLineQueries
      extend Forwardable

      def_delegators :relation, :map, :count, :to_sql

      def initialize(relation = OrderLine.all)
        @relation = relation
      end

      def is_cancelled
        @relation = @relation.
          where(&#39;order_lines.cancelled_at is not null&#39;)
        self
      end

      def non_test_order_lines
        @relation = @relation.
          joins(:order).
            where(
              orders: {
                test_transaction: false
              }
            )
        self
      end

      def non_tax_payments
        @relation = @relation.
          joins(:order_line_transactions =&amp;gt; :payment).
          joins(&amp;quot;LEFT OUTER JOIN tax_payments on payments.id = tax_payments.payment_id&amp;quot;).
            where(&amp;quot;tax_payments.payment_id IS NULL&amp;quot;).
            distinct
        self
      end

      def created_before_reporting_range(time_range: nil)
        raise ArgumentError, &amp;quot;time_range is required&amp;quot; unless !!time_range
        @relation = @relation.
          where(
            &#39;order_lines.created_at &amp;lt;= ?&#39;, time_range.start_time
          )
        self
      end

      private

      def relation
        @relation
      end
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;dl&gt;
&lt;dt&gt;Why are you returning &lt;code&gt;self&lt;/code&gt;? It looks very strange.&lt;/dt&gt;
&lt;dd&gt;I&amp;rsquo;m returning &lt;code&gt;self&lt;/code&gt; to allow method chaining. It is similar to &lt;a href=&#34;http://martinfowler.com/bliki/FluentInterface.html&#34;&gt;Fluent Interfaces&lt;/a&gt; but with a very tight focus on query building.&lt;/dd&gt;
&lt;dt&gt;Since you&amp;rsquo;re returning self, that means you&amp;rsquo;re mutating the object when you&amp;rsquo;re chaining the methods. That means the object can&amp;rsquo;t be reused to create a different query, and you&amp;rsquo;ll need to start with a new object, right?&lt;/dt&gt;
&lt;dd&gt;Yes, that is correct. It was a common mistake for me in the past to do something like this:&lt;/dd&gt;
&lt;/dl&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# NOTE: DON&#39;T DO THIS
class OrderReporter
  def initialize
    @query = OrderLineQueries.new
  end

  def cancelled
    @query.non_test_order_lines.is_cancelled
  end

  def test_orders_before_december_31_2015
    @query.created_before_reporting_range(time_range: time_range.new(&amp;quot;&amp;lt;= Dec 31 2015&amp;quot;))
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;dl&gt;
&lt;dd&gt;&lt;p&gt;It took some time to figure out that since I&amp;rsquo;ve been sharing &lt;code&gt;@query&lt;/code&gt; with two methods, &lt;code&gt;#cancelled&lt;/code&gt; is actually modifying the query object such that &lt;code&gt;#test_orders_before_december_31_2015&lt;/code&gt; won&amp;rsquo;t ever have test order lines in its resultset.&lt;/p&gt;&lt;/dd&gt;
&lt;dd&gt;&lt;p&gt;Furthermore, the &lt;strong&gt;individual unit tests&lt;/strong&gt; for these methods are &lt;em&gt;green&lt;/em&gt;; the only way to expose the bug was to have &lt;strong&gt;both methods&lt;/strong&gt; called in a single test example. You can imagine how frustrating the debugging must have been.&lt;/p&gt;&lt;/dd&gt;
&lt;dd&gt;&lt;p&gt;That&amp;rsquo;s a caveat that you&amp;rsquo;ll need to remember when using self-mutating objects like these.&lt;/p&gt;&lt;/dd&gt;
&lt;dd&gt;&lt;p&gt;I did have an experiment where each method is immutable:&lt;/p&gt;&lt;/dd&gt;
&lt;/dl&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def paid(relation = Payment.all)
  relation.
    where(&amp;quot;payments.state = ?&amp;quot;, &amp;quot;paid&amp;quot;)
end

def paid_or_refunded(relation = Payment.all)
  relation.
    where(&amp;quot;payments.state&amp;quot; =&amp;gt; %w(paid refunded))
end

def non_declined(relation = Payment.all)
  relation.
    where(&amp;quot;payments.state != ?&amp;quot;, &amp;quot;declined&amp;quot;)
end

def non_shipping(relation = Payment.all)
  relation.
    where(&amp;quot;payments.reference_number NOT LIKE ?&amp;quot;, &amp;quot;-shipping&amp;quot;)
end
&lt;/code&gt;&lt;/pre&gt;

&lt;dl&gt;
&lt;dd&gt;and you&amp;rsquo;d do a &lt;code&gt;golang&lt;/code&gt;-like composition when filtering the query:&lt;/dd&gt;
&lt;/dl&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def report
  query = paid
  query = non_declined(query)
  query = non_shipping(query)
  query
end
&lt;/code&gt;&lt;/pre&gt;

&lt;dl&gt;
&lt;dd&gt;or something like:&lt;/dd&gt;
&lt;/dl&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def report
  paid(non_declined(non_shipping))
end
&lt;/code&gt;&lt;/pre&gt;

&lt;dl&gt;
&lt;dd&gt;but I never really got around to exploring this further (too many parentheses!!!) as the fluent interface looked so much nicer:&lt;/dd&gt;
&lt;/dl&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def report
  paid.
    non_declined.
    non_shipping
end
&lt;/code&gt;&lt;/pre&gt;

&lt;dl&gt;
&lt;dt&gt;What&amp;rsquo;s up with &lt;code&gt;Forwardable&lt;/code&gt;? If you want to call &lt;code&gt;ActiveRelation&lt;/code&gt; methods on the query object, why not just expose something like &lt;code&gt;#relation&lt;/code&gt; then you can call it with something like &lt;code&gt;query.is_cancelled.relation.to_sql&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;I did expose the internal &lt;code&gt;@relation&lt;/code&gt; object before to do exactly what you are suggesting, and it was all good for a while. Then something really terrible happened. I haven&amp;rsquo;t been working on the project for sometime so I wasn&amp;rsquo;t able to do much code review, and I was a bit aghast when I saw these:&lt;/dd&gt;
&lt;/dl&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;query = ProductLinesQuery.new
product_lines_with_paypal = query.with_paypal_or_paypal_express
  .with_english_currency
  .with_english_language
  .relation.where(id: product_lines_id)  # wtf ...
&lt;/code&gt;&lt;/pre&gt;

&lt;dl&gt;
&lt;dd&gt;I felt it was an abuse of the exposed &lt;code&gt;relation&lt;/code&gt; attribute beause it completely undermines the point of the query object (which was to encapsulate queries). Using &lt;code&gt;Forwardable&lt;/code&gt; I can delegate specific methods to the internal &lt;code&gt;ActiveRelation&lt;/code&gt; object without having to expose the whole &lt;code&gt;ActiveRecord&lt;/code&gt; &lt;a href=&#34;http://tenderlovemaking.com/2014/06/02/yagni-methods-are-killing-me.html&#34;&gt;API footprint&lt;/a&gt;.&lt;/dd&gt;
&lt;dt&gt;I see a lot of modules. Where do you put these query objects?&lt;/dt&gt;
&lt;dd&gt;I used to put them in a folder named &lt;code&gt;app/queries&lt;/code&gt; but as the application grew (and the number of query objects also grew) I realized this isn&amp;rsquo;t the best way to organize the files. Now I put them just beside the files that use them.&lt;/dd&gt;
&lt;/dl&gt;

&lt;pre&gt;&lt;code&gt;app
 ├─ controllers
 └─ models
     ├─ subscription
     │   ├─ calculations
     │   │   ├─ customers.rb
     │   │   └─ order_line_queries.rb
     │   └─ calculators
     └─ cohort
&lt;/code&gt;&lt;/pre&gt;

&lt;dl&gt;
&lt;dt&gt;Hm, so you mean you have multiple folders of query objects? Isn&amp;rsquo;t that confusing? If you put them all in just one folder, then you know that all your queries are in one place.&lt;/dt&gt;
&lt;dd&gt;On the contrary, putting the query object near the calling file makes it a lot less confusing. When I look at a folder structure, I know exactly what queries this particular object needs.&lt;/dd&gt;
&lt;dt&gt;How about code reuse? Since you&amp;rsquo;re spreading all your query objects around, you&amp;rsquo;ll eventually have to duplicate code that does the same thing.&lt;/dt&gt;
&lt;dd&gt;Surprisingly there are very few generic queries that I need to duplicate, because each of the querying logic I need are very specific to the task. However, there are indeed a few queries that are more used than others. I usually have them included as a module in the query object.&lt;/dd&gt;
&lt;dt&gt;What&amp;rsquo;s up with the separate &lt;code&gt;customers.rb&lt;/code&gt;?&lt;/dt&gt;
&lt;dd&gt;Oh that? I prefer my query objects to focus on &lt;strong&gt;composable&lt;/strong&gt; methods, while separating out another object that &lt;strong&gt;composes&lt;/strong&gt; these queries. It looks something like this:&lt;/dd&gt;
&lt;/dl&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;module Subscription
  module Calculations
    class Customers
      def initialize(start_date, end_date, bundle: nil)
        @time_query = TimeQuery.new(start_date, end_date)
        @bundle = bundle
      end

      def beginning
        Calculations::OrderLineQueries.new.
          non_test_order_lines.
          money_received.
          specific_bundle(ids: @bundle.id).
          created_before_reporting_range(time_query: @time_query).
          not_cancelled_or_cancelled_after_reporting_range(time_query: @time_query)
      end

      def second_payment
        Calculations::OrderLineQueries.new.
          non_test_order_lines.
          money_received.
          specific_bundle(ids: @bundle.id).
          trial.

          paid_payments.
          non_tax_payments.
          non_shipping_payments.

          created_before_reporting_range(time_query: @time_query).
          created_after_30_days_before_reporting_range(time_query: @time_query).
          not_cancelled_or_cancelled_after_reporting_range(time_query: @time_query).
          more_than_one_payment
      end

      def new_in_reporting_range
        Calculations::OrderLineQueries.new.
          non_test_order_lines.
          money_received.
          specific_bundle(ids: @bundle.id).
          created_during_reporting_range(time_query: @time_query)
      end
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;dl&gt;
&lt;dd&gt;&lt;p&gt;Then the calculators in the &lt;code&gt;calculators&lt;/code&gt; folder use the methods in &lt;code&gt;customers.rb&lt;/code&gt; to further compose a full report.&lt;/p&gt;&lt;/dd&gt;
&lt;dd&gt;&lt;p&gt;Bonus: whenever the feature requester asks me &amp;ldquo;what exactly goes on with each of these columns&amp;rdquo; I just point her to the github page for this file. The fluent interface is one way for me to easily explain what goes into calculating an entry, without having to resort to a detailed explanation.&lt;/p&gt;&lt;/dd&gt;
&lt;dt&gt;Why don&amp;rsquo;t you just use scopes? They have almost the exact syntax that you&amp;rsquo;re proposing, and it&amp;rsquo;s built-in to Rails!&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Scopes are great when your project is still small, but eventually you&amp;rsquo;ll end up with a lot of scopes in your model. The &lt;a href=&#34;https://drive.google.com/file/d/0ByOwmqah_nuGNHEtcU5OekdDMkk/view&#34;&gt;Single Responsibility Principle&lt;/a&gt; says that there should only be one reason for an object to change, and putting these type of queries into the model as scopes violates that principle. The change in how a tax payment is queried is different from the change in how tax payments are calculated.&lt;/p&gt;&lt;/dd&gt;
&lt;dd&gt;&lt;p&gt;Even if I don&amp;rsquo;t appeal to higher authority by mentioning SRP, separating the queries from the &lt;code&gt;ActiveRecord&lt;/code&gt; model is still a good idea. It just makes the whole thing easier to work with because I don&amp;rsquo;t have to scroll through a huge file with the scopes on the first half and the business logic on the second half.
&lt;hr /&gt;&lt;/p&gt;&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;There you have it. I&amp;rsquo;m still exploring query objects and figuring out a more generalized solution that I can implement in all my projects. Feedback and comments are highly appreciated!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Using Hash Fetch</title>
      <link>http://life.beyondrails.com/blog/2015/12/11/using-hash-fetch/</link>
      <pubDate>Fri, 11 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>http://life.beyondrails.com/blog/2015/12/11/using-hash-fetch/</guid>
      <description>&lt;p&gt;I fat-finger my code &lt;strong&gt;a lot&lt;/strong&gt; and produce a lot of typos. I do test driven development so it&amp;rsquo;s not as bad, but what&amp;rsquo;s annoying is when I typo a hash key and the test blows up with a failure due to a &lt;code&gt;nil&lt;/code&gt; &amp;ndash; resulting in a very confusing error message.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;the-issue&#34;&gt;The issue&lt;/h1&gt;

&lt;p&gt;One of my tests look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Given(:instance) { klass.new(payment: payment, signup: signup) }
context &amp;quot;payment data&amp;quot; do
  When(:line) { instance.payment_hash }
  Then { line[:amount] == 99.0 }
  Then { line[:shipment_address] == &amp;quot;999 papaya triangle windsor alabama 06040 united states&amp;quot; }
  Then { line[:bundle_ids] == &amp;quot;88 44&amp;quot; }
  Then { line[:bundle_names] == &amp;quot;test_bundle_88 test_bundle_44&amp;quot; }
  Then { line[:payment_id] == 859017 }
  Then { line[:payment_state] == &amp;quot;paid&amp;quot; }
  Then { line[:payment_date] == &amp;quot;2015-11-11&amp;quot; }
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Can you see the typo?&lt;/p&gt;

&lt;p&gt;I couldn&amp;rsquo;t &amp;ndash; not immediately. At least, not until I saw the code implementation:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def payment_hash
  {
    amount: @payment.amount,
    shipping_address: address_to_s(@payment.order.shipping_address),
    bundle_ids: @payment.order_lines.map {|o| o.bundle.id}.join(&#39; &#39;),
    bundle_names: @payment.order_lines.map {|o| o.bundle.name}.join(&#39; &#39;),
    payment_id: @payment.id,
    payment_state: @payment.state,
    payment_date: date_to_excel_string(@payment.created_at),
  }
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Can you see it now?&lt;/p&gt;

&lt;h1 id=&#34;the-soultion&#34;&gt;The soultion&lt;/h1&gt;

&lt;p&gt;I eventually figured out where the typo was, and was super annoyed that I changed all my hash key access for this test to &lt;code&gt;Hash#fetch&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Given(:instance) { klass.new(payment: payment, signup: signup) }
context &amp;quot;payment data&amp;quot; do
  When(:line) { instance.payment_hash }
  Then { line.fetch(:amount) == 99.0 }
  Then { line.fetch(:shipping_address) == &amp;quot;999 papaya triangle windsor alabama 06040 united states&amp;quot; }
  Then { line.fetch(:bundle_ids) == &amp;quot;88 44&amp;quot; }
  Then { line.fetch(:bundle_names) == &amp;quot;test_bundle_88 test_bundle_44&amp;quot; }
  Then { line.fetch(:payment_id) == 859017 }
  Then { line.fetch(:payment_state) == &amp;quot;paid&amp;quot; }
  Then { line.fetch(:payment_date) == &amp;quot;2015-11-11&amp;quot; }
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Hash#fetch&lt;/code&gt; is way to get the value from a hash, given a hash key. It&amp;rsquo;s very similar to &lt;code&gt;#[]&lt;/code&gt; with some slight (and in this case, effective) differences.&lt;/p&gt;

&lt;p&gt;From the &lt;a href=&#34;http://ruby-doc.org/core-2.2.0/Hash.html#method-i-fetch&#34;&gt;documentation&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;fetch(key [, default] ) → obj&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;fetch(key) {| key | block } → obj&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Returns a value from the hash for the given key. If the key can’t be found, there are several options: With no other arguments, it will raise an &lt;code&gt;KeyError&lt;/code&gt; exception; if default is given, then that will be returned; if the optional code block is specified, then that will be run and its result returned.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;h = { &amp;quot;a&amp;quot; =&amp;gt; 100, &amp;quot;b&amp;quot; =&amp;gt; 200 }
h.fetch(&amp;quot;a&amp;quot;)                            #=&amp;gt; 100
h.fetch(&amp;quot;z&amp;quot;, &amp;quot;go fish&amp;quot;)                 #=&amp;gt; &amp;quot;go fish&amp;quot;
h.fetch(&amp;quot;z&amp;quot;) { |el| &amp;quot;go fish, #{el}&amp;quot;}   #=&amp;gt; &amp;quot;go fish, z&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;The following example shows that an exception is raised if the key is not found and a default value is not supplied.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;h = { &amp;quot;a&amp;quot; =&amp;gt; 100, &amp;quot;b&amp;quot; =&amp;gt; 200 }
h.fetch(&amp;quot;z&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;produces:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;prog.rb:2:in `fetch&#39;: key not found (KeyError)
 from prog.rb:2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The last example is what I gain the most benefit from: it clarifies exactly where I went wrong. In the first code example I gave, the issue was I was using &lt;code&gt;shipment_address&lt;/code&gt; instead of &lt;code&gt;shipping_address&lt;/code&gt; and since they both &lt;strong&gt;looked almost the same&lt;/strong&gt; I initially thought that the value was indeed &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;By using &lt;code&gt;Hash#fetch&lt;/code&gt; I completely sidestep the problem of confusing error messages and get a clearer one that tells me the key I&amp;rsquo;m trying to access does not actually exist.&lt;/p&gt;

&lt;h1 id=&#34;faq&#34;&gt;FAQ&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;You said you&amp;rsquo;re doing TDD, but I can see that the typo is in the middle of the test! If you&amp;rsquo;re really doing TDD then you should have caught the bug at the last line!!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It&amp;rsquo;s true, I caught the bug at the last line (and catching the typo was a lot easier because I knew exactly where to look). You&amp;rsquo;ll notice that the hash keys are alphabetically arranged; I moved the typo&amp;rsquo;d line in the middle as an artistic decision. As Mark Twain famously said: never let the truth get in the way of a good story. :P&lt;/p&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
&lt;p&gt;How can this be used to avoid &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; when trying to access a deep nested hash like this:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;hash = {foo:{bar: {baz: &amp;quot;hello world&amp;quot;}}}
puts hash[:foo][:bar][:baz] if hash[:foo] &amp;amp;&amp;amp; hash[:foo][:bar]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can use the &lt;code&gt;default&lt;/code&gt; value option during the call:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;hash = {foo:{bar: {baz: &amp;quot;hello world&amp;quot;}}}
puts hash.fetch(:foo, {}).fetch(:bar, {}).fetch(:baz, nil)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or, if you&amp;rsquo;re using Ruby 2.3 you can use &lt;code&gt;Hash#dig&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;hash = {foo:{bar: {baz: &amp;quot;hello world&amp;quot;}}}
puts hash.dig(:foo, :bar, :baz)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you&amp;rsquo;re not yet using Ruby 2.3 (which is true at the time of this post&amp;rsquo;s publication) then you can use a &lt;a href=&#34;https://github.com/Invoca/ruby_dig&#34;&gt;gem&lt;/a&gt; to add that method call.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ActiveRecord and Forty Two</title>
      <link>http://life.beyondrails.com/blog/2015/12/06/activerecord-and-forty-two/</link>
      <pubDate>Sun, 06 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>http://life.beyondrails.com/blog/2015/12/06/activerecord-and-forty-two/</guid>
      <description>&lt;p&gt;I was making a gem to have Google Spreadsheets as the backing store for an &lt;code&gt;ActiveRecord&lt;/code&gt; adapter when I came upon this interesting method:&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Same as +first+ except returns only the fourth record.
def fourth(*args)
  @association.fourth(*args)
end

# Same as +first+ except returns only the fifth record.
def fifth(*args)
  @association.fifth(*args)
end

# Same as +first+ except returns only the forty second record.
# Also known as accessing &amp;quot;the reddit&amp;quot;.
def forty_two(*args)
  @association.forty_two(*args)
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Today I learned that &lt;code&gt;ActiveRecord&lt;/code&gt; has methods first until fifth, and also forty_two.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s even in the &lt;a href=&#34;https://github.com/rails/rails/blob/master/guides/source/active_support_core_extensions.md#extensions-to-array&#34;&gt;documentation&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The methods second, third, fourth, and fifth return the corresponding element (first is built-in). Thanks to social wisdom and positive constructiveness all around, forty_two is also available.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It seems to have been added by &lt;a href=&#34;https://github.com/jeremy&#34;&gt;jeremy&lt;/a&gt; on March 21, 2009 puportedly to &amp;ldquo;&lt;a href=&#34;https://github.com/rails/rails/commit/83fd1ae122cf1ee4ea2c52e0bd963462163516ca&#34;&gt;Convert array extension modules to class reopens&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>