<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Recent Content on Life Beyond Rails </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://localhost:1313/index.xml/</link>
    
    
    
    <updated>Mon, 15 Dec 2014 00:00:00 UTC</updated>
    
    <item>
      <title>The Tick-Tock Innovation Model Applied to Agile Methodology</title>
      <link>http://localhost:1313/blog/2014/12/15/the-tick-tock-innovation-model-applied-to-agile-methodology/</link>
      <pubDate>Mon, 15 Dec 2014 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/blog/2014/12/15/the-tick-tock-innovation-model-applied-to-agile-methodology/</guid>
      <description>&lt;p&gt;You&amp;rsquo;ve probably heard of the &lt;a href=&#34;http://www.intel.com/content/www/us/en/silicon-innovations/intel-tick-tock-model-general.html&#34;&gt;tick-tock model that Intel is using&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s a model where every 18 months, there&amp;rsquo;s a new focus on the chip architecture: the tick is a shrinking of the chip (which requires retrofitting their manufacturing process to support the smaller size) and the tock is an upgrade of the architecture itself, using the current manufacturing process.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m trying out a similar model with my team. We&amp;rsquo;ve been very successful with our sprint goals so far, but one thing that I&amp;rsquo;ve seen is that the goals are decided just then and there. Tick-tock is a refinement of the sprint goal determination process.&lt;/p&gt;

&lt;p&gt;With every Tick, the primary focus is on the development of new features (plus business as usual stories, bug fixes etc). With every Tock we spend more time on refactoring, code quality, updating standards, documentation, and cleanup (and of course any new feature that is deemed &amp;ldquo;very urgent that it can&amp;rsquo;t wait another week,&amp;rdquo; as well as bugfixes.&lt;/p&gt;

&lt;p&gt;From the retrospectives, I&amp;rsquo;ve seen that many of my team&amp;rsquo;s speedbumps (which deals mostly with legacy code) come from code that isn&amp;rsquo;t as good quality as we hoped. Every new feature and code that we write is already up to standards, but it&amp;rsquo;s the older code that keeps us from going forward as fast as we can.&lt;/p&gt;

&lt;p&gt;Tick-tock will allow us to maintain an innovation cadence while making sure we start paying our debts before they overwhelm us.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Setting Up and Automating my Hugo Blog Deployment to Github Pages</title>
      <link>http://localhost:1313/blog/2014/12/14/setting-up-and-automating-my-hugo-blog-deployment-to-github-pages/</link>
      <pubDate>Sun, 14 Dec 2014 07:16:31 -0800</pubDate>
      
      <guid>http://localhost:1313/blog/2014/12/14/setting-up-and-automating-my-hugo-blog-deployment-to-github-pages/</guid>
      <description>

&lt;div class=&#34;info info&#34; data-title=&#34;Work In Progress&#34;&gt;
  &lt;p&gt;I&amp;rsquo;m still in the middle of writing this article, and I probably will be always updating this.&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;I&amp;rsquo;m currently moving my blog posts (and collecting all my blog entries from various blogging platforms) and putting them into Hugo. In case you&amp;rsquo;re wondering how I&amp;rsquo;ve set mine up, here&amp;rsquo;s a guide of what I&amp;rsquo;ve done.&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;Choosing the hosting platform&lt;/h2&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Setting up the blog&lt;/h2&gt;

&lt;p&gt;sudo aptitude install golang
sudo aptitude install -y mercurial
go get -v github.com/spf13/hugo&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Setting up the github pages&lt;/h2&gt;

&lt;p&gt;There&amp;rsquo;s a really cool guide over at the official &lt;a href=&#34;http://gohugo.io/tutorials/github_pages_blog/&#34;&gt;Hugo documentation&lt;/a&gt; and I advise everyone to check it out.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git checkout source

# Delete the master branch
git branch -D master
git push origin :master

# Create an orphaned master branch
git checkout --orphan master
rm -rf *
git rm --cached $(git ls-files)

# Grab one file from the master branch so we can make a commit
git checkout source .gitignore
git commit -m &amp;quot;INIT: initial commit on gh-pages branch&amp;quot;
git push origin master

# Return to the source branch
git checkout source

# Remove the public folder to make room for the master subtree
rm -rf public
git add -A
git commit -m &#39;remove stale public folder&#39;

# Add the master  branch of the repository.
# It will look like a folder named public
git subtree add --prefix\
	public git@github.com:parasquid/parasquid.github.io.git master --squash

# Pull down the file we just committed. This helps avoid merge conflicts
git subtree pull --prefix=public origin master -m &#39;merge origin&#39;

# Add the CNAME
touch public/CNAME
echo &amp;quot;life.beyondrails.com&amp;quot; &amp;gt; public/CNAME
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;Scripting the deployment&lt;/h2&gt;

&lt;p&gt;Again I refered back to the hugo documentation on &lt;a href=&#34;http://gohugo.io/tutorials/github_pages_blog/&#34;&gt;setting up hugo for guthub hosting&lt;/a&gt; and I used it as the basis for my own deployment script.&lt;/p&gt;

&lt;p&gt;My workflow however is unlike the any of the trhee recommended workflows (more like a hybrid):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I do use Github pages, but as a Personal/Organization page. That means my repository is at parasquid/parasquid.github.io&lt;/li&gt;
&lt;li&gt;Instead of two repositories, I prefer to have a single repository containing both the source files and the cooked files.&lt;/li&gt;
&lt;li&gt;Because I&amp;rsquo;m using Github Pages for Personal/Organization I need to have the cooked pages inside the master branch. I had to modify the deployment script a little bit to ensure that my sources remain in the source branch, the subtree is located at the master branch (prefixed with public), and that all the pushing and pulling are seamless so it&amp;rsquo;s all automatic (and there&amp;rsquo;s no need for manual merging).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the end I went for a &lt;code&gt;git subtree pull&lt;/code&gt; before regenerating the blog. &lt;strong&gt;And never trying to touch the master branch.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;However, the &lt;code&gt;git subtree&lt;/code&gt; command is only present in the 1.7.11 version of git. Ubuntu Precise (12.04) only comes with 1.7.9.5 so in order to use this, a &lt;a href=&#34;https://launchpad.net/~git-core/+archive/ubuntu/ppa&#34;&gt;PPA&lt;/a&gt; must be installed:&lt;/p&gt;

&lt;pre&gt;
  deb http://ppa.launchpad.net/git-core/ppa/ubuntu precise main
  deb-src http://ppa.launchpad.net/git-core/ppa/ubuntu precise main
&lt;/pre&gt;

&lt;p&gt;While trying to do deployment I ran into numerous problems with errors like:&lt;/p&gt;

&lt;pre&gt;
error: failed to push some refs to
       &#39;git@github.com:parasquid/parasquid.github.io.git&#39;
hint: Updates were rejected because a pushed branch tip is behind its remote
hint: counterpart. Check out this branch and integrate the remote changes
hint: (e.g. &#39;git pull ...&#39;) before pushing again.
hint: See the &#39;Note about fast-forwards&#39; in &#39;git push --help&#39; for details.
&lt;/pre&gt;

&lt;p&gt;Apparently this message comes up when you already have files in the remote branch and for some reason pushing will cause a merge conflict. Eventually I settled in for a bit of brutish action: deleting the master branch and recreating it as an orphan page every deploy. I&amp;rsquo;m not sure if this is something that Github will frown upon; sure it&amp;rsquo;s okay to delete and recreate branches, but since this is a hosted page it may screw up their bots trying to retrieve the latest version of the branch (since I&amp;rsquo;m messing up with git history).&lt;/p&gt;

&lt;p&gt;In order to delete the master branch, there needs to be some pre-work done. Github does not allow you to delete the default branch (which is master) so you&amp;rsquo;d need to first set the default branch to something else, then delete master. Matthew Brett has a very good &lt;a href=&#34;http://matthew-brett.github.io/pydagogue/gh_delete_master.html&#34;&gt;article&lt;/a&gt; that explains the procedure in full.&lt;/p&gt;

&lt;p&gt;The downside here is that the site goes down for around 30 minutes everytime there&amp;rsquo;s a deployment :( Not cool. So I had to look for a different way.&lt;/p&gt;

&lt;p&gt;After struggling for quite a few hours this is the best I can come up with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

echo -e &amp;quot;\033[0;32mDeploying updates to GitHub...\033[0m&amp;quot;

git checkout source
git pull origin source
git add -A
git commit -m &#39;committing work in progress&#39;

# Pull down the file we just committed. This helps avoid merge conflicts
git subtree pull --prefix=public origin master -m &#39;merge origin&#39;

# Build the project.
hugo -t hyde-x

# Add the CNAME
touch public/CNAME
echo &amp;quot;life.beyondrails.com&amp;quot; &amp;gt; public/CNAME

# Add changes to git.
git add -A

# Commit changes.
msg=&amp;quot;rebuilding site `date`&amp;quot;
if [ $# -eq 1 ]
  then msg=&amp;quot;$1&amp;quot;
fi
git commit -m &amp;quot;$msg&amp;quot;

# Push source and build repos.
git push origin source
git subtree push --prefix=public\
	git@github.com:parasquid/parasquid.github.io.git master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s a combination of the initial setup and the default deployment script from the hugo documentation. Now the only downside left (and this is a very minor thing for me) is that post updates take a number of minutes before they are seen live. But I can live with that.&lt;/p&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;Porting old blog entries to hugo&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve blogged on and off for quite some time in various domains and platforms. There really isn&amp;rsquo;t much I can do to automate the importing of the entries. Luckily I only have a handful of published posts, but I probably lost most of my drafts and idea dumps.&lt;/p&gt;

&lt;h2 id=&#34;toc_5&#34;&gt;Blogging workflow&lt;/h2&gt;

&lt;p&gt;So now that everything&amp;rsquo;s set and deployed, how do I continue writing?&lt;/p&gt;

&lt;h2 id=&#34;toc_6&#34;&gt;Questions?&lt;/h2&gt;

&lt;p&gt;If any of the instructions above are confusing, feel free to comment and I&amp;rsquo;ll try my best to answer the question in the comments as well as update the instructions :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Redoing my Blogs</title>
      <link>http://localhost:1313/blog/2014/12/12/redoing-my-blogs/</link>
      <pubDate>Fri, 12 Dec 2014 12:25:29 -0800</pubDate>
      
      <guid>http://localhost:1313/blog/2014/12/12/redoing-my-blogs/</guid>
      <description>&lt;p&gt;Yet again I&amp;rsquo;ve ported my blog into yet another blogging platform - &lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;. I feel so strongly that I&amp;rsquo;d be staying for quite some time on this platform that I&amp;rsquo;ve been porting over all my other posts in all my other various blogs over here.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s quite an interesting blogging platform. It outputs static files, which means hosting options are very cheap with a wide variety of providers.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>about</title>
      <link>http://localhost:1313/about/</link>
      <pubDate>Fri, 12 Dec 2014 12:02:07 -0800</pubDate>
      
      <guid>http://localhost:1313/about/</guid>
      <description>

&lt;h3 id=&#34;toc_0&#34;&gt;Hello there!&lt;/h3&gt;

&lt;p&gt;Hi there&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How I Hire Developers</title>
      <link>http://localhost:1313/blog/2014/11/04/how-i-hire-developers/</link>
      <pubDate>Tue, 04 Nov 2014 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/blog/2014/11/04/how-i-hire-developers/</guid>
      <description>&lt;p&gt;I was invited to pressent at the &lt;a href=&#34;http://www.projectrenaissance.com/technology/kl-ruby-brigade-2&#34;&gt;KL Ruby Brigade&lt;/a&gt; and I thought I shuld mix things around by talking about something not very technical but still very much relevant to the audience.&lt;/p&gt;

&lt;p&gt;Since I&amp;rsquo;m in charge (but saying &amp;ldquo;in-charge&amp;rdquo; is a bit of a misnomer since in Mindvalley we don&amp;rsquo;t really have predefined job descriptions) of the internship program for new tech hires, I figures I should share some of the things I consider when interviewing and hiring people.&lt;/p&gt;

&lt;p&gt;Here are the slides :)&lt;/p&gt;

&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/41100004&#34; width=&#34;760&#34; height=&#34;570&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Setup and Configuration of my Machines</title>
      <link>http://localhost:1313/blog/2014/08/03/setup-and-configuration-of-my-machines/</link>
      <pubDate>Sun, 03 Aug 2014 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/blog/2014/08/03/setup-and-configuration-of-my-machines/</guid>
      <description>

&lt;div class=&#34;info info&#34; data-title=&#34;Work In Progress&#34;&gt;
  &lt;p&gt;I&amp;rsquo;m still in the middle of writing this article, and I probably will be always updating this.&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;I&amp;rsquo;ve just recently (re)installed Linux on my Acer V5 122p. Had to fiddle around with UEFI settings thinking to preserve my Windows 8.1 partition, but eventually I had to bite the bullet. I wiped the whole partition clean and turned off UEFI so my installation would be a lot simpler.&lt;/p&gt;

&lt;p&gt;I ended up installing PeppermintOS which is a very lightweight distribution. After installing a few updates, the system was snappy and fast. I started to install the usual apps and configuration I normally use, when I realized I don&amp;rsquo;t have a document to use as a reference. I&amp;rsquo;ve been mostly doing stuff through memory and through Googling as soon as I encounter the problem or need.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the blogpost to rectify that, as well as give you a glimpse as to how I like my machine setup and configured :)&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;Setup natural scrolling&lt;/h2&gt;

&lt;p&gt;Ever since I got my Macbook Air 2010 upgraded to Lion, I&amp;rsquo;ve been a fan of what Apple called &amp;ldquo;natural scrolling.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.andybarratt.co.uk/lion-like-scrolling-on-ubuntu-inverse-scrolling-on-linux&#34;&gt;http://www.andybarratt.co.uk/lion-like-scrolling-on-ubuntu-inverse-scrolling-on-linux&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Setup Sublime Text&lt;/h2&gt;

&lt;p&gt;I know I should start learning Emacs, but Sublime Text (and before that, Textmate) had always been my editor of choice. That might change in the near future though :)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.webupd8.org/20&#34;&gt;Ubuntu PPA&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;toc_2&#34;&gt;Sublime Text settings&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://sublime.wbond.net/installation&#34;&gt;Package control&lt;/a&gt;
&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;Key management&lt;/h2&gt;

&lt;p&gt;Yes, I keep my private key in Dropbox. I know many people would say that this is a security risk (and it is) but the keys that I do keep in Dropbox are only those with access to non-critical remote systems that I own. I run some rtorrent download boxes as well as some application servers that I use for quickly testing out application ideas.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>API Documentation with Grape and Swagger</title>
      <link>http://localhost:1313/blog/2014/06/01/api-documentation-with-grape-and-swagger/</link>
      <pubDate>Sun, 01 Jun 2014 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/blog/2014/06/01/api-documentation-with-grape-and-swagger/</guid>
      <description>

&lt;div class=&#34;info info&#34; data-title=&#34;TL;DR&#34;&gt;
  &lt;p&gt;Use Swagger and Grape to create self-documenting APIs that automatically update themselves from metadata in the code. It also provides an API explorer to play around with.&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;During the AngelHack KL event, I (being the backend developer of the team) had to create an API to facilitate communication between the iPhone app and Twilio. Since it was a hackathon, there was not a lot of time to completely hash out API protocols (as well as explaining to my team mates how RESTful APIs work).&lt;/p&gt;

&lt;p&gt;I was able to solve this by using Grape and Swagger. I can develop the API at my own time. When a particular endpoint was finished, I can push to production and my team mate is immediately able to see the documentation. He was also able to make use of the API explorer to test out the API&amp;rsquo;s responses to his queries.&lt;/p&gt;

&lt;p&gt;We were able to quickly develop the whole project quickly and easily because of this, and here&amp;rsquo;s a quick look at using Swagger with Grape.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;toc_0&#34;&gt;Github Sample Application&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;ve made a sample application which you can refer to here: &lt;a href=&#34;https://github.com/parasquid/grape-swagger-sample-project&#34;&gt;https://github.com/parasquid/grape-swagger-sample-project&lt;/a&gt;. It was based off from another &lt;a href=&#34;http://funonrails.com/2014/03/building-restful-api-using-grape-in-rails/&#34;&gt;grape tutorial&lt;/a&gt; with modifications; see his page for a bit more information.&lt;/p&gt;

&lt;p&gt;A few changes I&amp;rsquo;ve made are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Instead of inheriting straight from Grape::API I instead opted to inherit from the API::V1::Root class. This allows me to easily put in common elements (such as the Swagger documentation mounts)&lt;/li&gt;
&lt;li&gt;I&amp;rsquo;ve added some CORS headers&lt;/li&gt;
&lt;li&gt;I&amp;rsquo;ve added in the swagger mount path&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;toc_1&#34;&gt;Grape&lt;/h3&gt;

&lt;p&gt;The self-documenting ability of Grape with Swagger actually consists of three separate gems that work together to provide an endpoint for a UI to consume. The first of these is Grape:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Grape is a REST-like API micro-framework for Ruby. It&amp;rsquo;s designed to run on Rack or complement existing web application frameworks such as Rails and Sinatra by providing a simple DSL to easily develop RESTful APIs. It has built-in support for common conventions, including multiple formats, subdomain/prefix restriction, content negotiation, versioning and much more.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There was a lightning talk at Red Dot Ruby Conf 2014 as well:&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;http://www.youtube.com/embed/lNXa-fjTroE&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;toc_2&#34;&gt;Grape Swagger&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;https://github.com/tim-vandecasteele/grape-swagger&#34;&gt;grape-swagger project&lt;/a&gt; has comprehensive instructions on enabling swagger for your Grape API; it&amp;rsquo;s really a no-brainer.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The grape-swagger gem provides an autogenerated documentation for your Grape API. The generated documentation is Swagger-compliant, meaning it can easily be discovered in Swagger UI.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;toc_3&#34;&gt;Swagger UI&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/tim-vandecasteele/grape-swagger/master/test/splines.png&#34; alt=&#34;Swagger UI Screenshot&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;After making sure that Grape has a swagger json endpoint, &lt;a href=&#34;https://github.com/wordnik/swagger-ui&#34;&gt;Swagger UI&lt;/a&gt; gives you two awesome abilities:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;it consumes the swagger documentation and presents it in a human-readable format&lt;/li&gt;
&lt;li&gt;it provides an API explorer&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It was the API explorer that hooked me into investing time and effort into experimenting with grape and swagger, and it&amp;rsquo;s been really helpful with team communication.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;toc_4&#34;&gt;Further Reading&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://intridea.github.io/grape/docs/index.html&#34;&gt;http://intridea.github.io/grape/docs/index.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://intridea.github.io/grape/&#34;&gt;http://intridea.github.io/grape/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://confreaks.com/videos/3848-rdrc2014-lightning-talks-building-rest-api-with-grape&#34;&gt;http://confreaks.com/videos/3848-rdrc2014-lightning-talks-building-rest-api-with-grape&lt;/a&gt; A lightning talk about Grape from the 2014 Red Dot Ruby Conference in Singapore&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/tim-vandecasteele/grape-swagger&#34;&gt;https://github.com/tim-vandecasteele/grape-swagger&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://bitboxer.de/2014/02/09/grape/&#34;&gt;http://bitboxer.de/2014/02/09/grape/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://funonrails.com/2014/03/building-restful-api-using-grape-in-rails/&#34;&gt;http://funonrails.com/&lt;sup&gt;2014&lt;/sup&gt;&amp;frasl;&lt;sub&gt;03&lt;/sub&gt;/building-restful-api-using-grape-in-rails/&lt;/a&gt; A more in-depth tour of how to build a restful API using Grape and mounting it in Rails&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://codetunes.com/2014/grape-part-II/&#34;&gt;http://codetunes.com/2014/grape-part-II/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Ruby and Blocks</title>
      <link>http://localhost:1313/blog/2014/03/04/ruby-and-blocks/</link>
      <pubDate>Tue, 04 Mar 2014 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/blog/2014/03/04/ruby-and-blocks/</guid>
      <description>

&lt;p&gt;One of the most often used and ironically least understood concepts in the Ruby programming language is the block. If you&amp;rsquo;ve used one of the Enumerable mixed-in objects, you&amp;rsquo;ve encountered the block syntax.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;array = [1, 2, 3, 4, 5]

# returns all the odd numbers of the array
array.delete_if { |e| e.even? }

#  =&amp;gt; [1, 3, 5]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or the more common:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;array = [1, 2, 3, 4, 5]

# prints out all of the array&#39;s elements
array.each do |element|
  puts element
end

# 1
# 2
# 3
# 4
# 5
#  =&amp;gt; [1, 2, 3, 4, 5]    
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ruby blocks also enable a lot of the functional programming DSL such as:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;array = [1, 2, 3, 4, 5]

# returns the sum of the squares of each element of the array
array.map { |e| e ** 2 }.reduce(:+)

#  =&amp;gt; 55
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Robert Sosinski has written a really awesome &lt;a href=&#34;http://www.robertsosinski.com/2008/12/21/understanding-ruby-blocks-procs-and-lambdas/&#34;&gt;tutorial&lt;/a&gt; about ruby blocks and I&amp;rsquo;m encouraging you to go through it.&lt;/p&gt;

&lt;p&gt;All of these however are just skimming over the power of blocks. Sure, they&amp;rsquo;re good for eye candy &amp;ndash; we won&amp;rsquo;t be able to use such an elegant looping syntax without the use of blocks, but it&amp;rsquo;s not just another way to loop over a collection!&lt;/p&gt;

&lt;p&gt;In fact, blocks (and its related concepts Procs and lambdas) enable a very important programming concept: &lt;a href=&#34;http://en.wikipedia.org/wiki/Loose_coupling&#34;&gt;loose coupling.&lt;/a&gt; For instance, suppose you do:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def print_name
  puts &amp;quot;Hello there. I&#39;ve got your name:&amp;quot;
  yield
end

print_name do
  puts &amp;quot;Tristan&amp;quot;
end

# Hello there. I&#39;ve got your name:
# Tristan
#  =&amp;gt; nil
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I could just have as easily done this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def print_name(name)
  puts &amp;quot;Hello there. I&#39;ve got your name:&amp;quot;
  puts name
end

print_name(&amp;quot;Tristan&amp;quot;)

# Hello there. I&#39;ve got your name:
# Tristan
#  =&amp;gt; nil
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which does exactly the same thing.&lt;/p&gt;

&lt;p&gt;Well not exactly, because with the second example, the method explicitly defined that the name be printed out to STDOUT whereas in the first example, I could have done:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;print_name do
  File.open(local_filename, &#39;w&#39;) {|f| f.write(name) }
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which writes the name into a file. I could have just as easily logged it using &lt;code&gt;Rails.logger&lt;/code&gt;, or sent it over a TCP Socket, or save it in a database entry (granted &lt;code&gt;print_name&lt;/code&gt; is a bad method name for this purpose, but hey &amp;ndash; with great power comes great responsibility).&lt;/p&gt;

&lt;p&gt;Rob Sobers had an epiphany that many people seeking to understand blocks have had. As mentioned in Rob&amp;rsquo;s &lt;a href=&#34;http://robsobers.com/struggle-ruby-blocks/&#34;&gt;article&lt;/a&gt;, you are an active participant in the method you&amp;rsquo;re calling. The method is basically doing a cop-out and telling you &amp;ldquo;hey, I&amp;rsquo;m gonna do this and this but I&amp;rsquo;m giving you the option to also do something else while I&amp;rsquo;m doing that (which I heavily encourage you to do so because you&amp;rsquo;re actually doing the heavy lifting)&amp;rdquo;&lt;/p&gt;

&lt;p&gt;This allows you to be quite flexible when you&amp;rsquo;re writing reusable code or libraries, of which you don&amp;rsquo;t really know (or care) what the client code would do. That&amp;rsquo;s the case for the &lt;a href=&#34;https://github.com/parasquid/snoopka&#34;&gt;Snoopka Gem&lt;/a&gt; I wrote, which does the work of connecting to a Kafka stream but defers the processing of the messages to client code.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;puts &#39;Starting the Kafka listener&#39;

listener = Snoopka::Listener.new host: &amp;quot;localhost&amp;quot;, port: 9092

handler = Handler.new
listener.add_observer &#39;test&#39;, &amp;amp;handler
# or alternatively you can also do
#
# listener.add_observer &#39;test&#39; do |message|
#   puts &amp;quot;your handler code here&amp;quot;
#   puts message
# end

loop do
  listener.consume
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is another neat way to use blocks in your code. Have you ever written a migration script or Rakefile and you wanted to know how long it will take at a particular point in time? There&amp;rsquo;s this gem called &lt;a href=&#34;https://github.com/jfelchner/ruby-progressbar&#34;&gt;ProgressBar&lt;/a&gt; that does exactly that. I&amp;rsquo;ll show you how to make your task so that it will pipe in information to ProgressBar in order for it to display cool stuff.&lt;/p&gt;

&lt;p&gt;This code is, by the way, lifted from production code (of course the implementation details have been mocked out; tangentially, the ability to mock things out is one side-effect of good programming design, but that&amp;rsquo;s a topic for another day):&lt;/p&gt;

&lt;p&gt;``` ruby tasks/migration.rb
module Tasks
  class Migration
    def self.migrate_all(offset=0,limit=(Tasks::Lead.count - offset))
      Tasks::Lead.offsetted_entries.each do |lead|
        migrate_lead(lead)
        yield lead if block_given?
      end
    end&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def self.migrate_lead(m_lead)
  # mocked response
  # originally copied over the lead from MongoDB to Postgres
  sleep(rand(1..200)/100)
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;end
end&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
``` ruby tasks/lead.rb
module Tasks
  class Lead
    def self.count
      offsetted_entries.count
    end

    def self.offsetted_entries(skip=0, offset=0)
      # mocked response
      # originally returns leads from the database with a particular
      # skip and offset
      return 1..100
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;``` ruby Rakefile
namespace :migrations do
  desc &amp;lsquo;migrate entries from old mongodb database to postgresql&amp;rsquo;
  task :migrate_from_mongodb_to_postgres =&amp;gt; :environment do
    progress = ProgressBar.create title: &amp;lsquo;Leads&amp;rsquo;,
      total: Tasks::Lead.count,
      :format =&amp;gt; &amp;lsquo;%a |%b&amp;gt;&amp;gt;%i| %p%% %t %c of %C %e&amp;rsquo;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Tasks::Migration.migrate_all { progress.increment }

progress.finish
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;end
end
```&lt;/p&gt;

&lt;p&gt;You can also get this code from &lt;a href=&#34;https://github.com/mindvalley/code_kata&#34;&gt;github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Blocks are Ruby constructs that provide a very clean and elegant way to provide flexibility to your code. Do you have any other ideas on how to improve your code using blocks?&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;toc_0&#34;&gt;Updates&lt;/h3&gt;

&lt;p&gt;I presented this topic to the KL Ruby Brigade meetup in Kuala Lumpur, Malaysia. There have been a few questions after the presentation and I&amp;rsquo;ll try to address them here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Q: What&amp;rsquo;s the difference between a block and a Proc?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A: I think &lt;a href=&#34;http://www.robertsosinski.com/2008/12/21/understanding-ruby-blocks-procs-and-lambdas/&#34;&gt;Robert&lt;/a&gt; will explain this a lot more comprehensively. In a nutshell: a block and a Proc are conceptually similar but a Proc gives you a handle that allows you to reuse the block later on, whereas a block is similar to an anonymous function in Java or C# (you define them inline and you can&amp;rsquo;t refer to them again later on).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Q: What&amp;rsquo;s the difference between the &lt;code&gt;{}&lt;/code&gt; syntax and the &lt;code&gt;do...end&lt;/code&gt; syntax?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A: This has bitten me and many of my colleagues, and the answer has to do with binding precedence. This &lt;a href=&#34;http://stackoverflow.com/a/5587399&#34;&gt;Stackoverflow answer&lt;/a&gt; can give you more details. In a nutshell, the &lt;code&gt;{}&lt;/code&gt; syntax binds strongly that without parentheses it will bind to the last parameter (in a multi-parameter method) whereas the &lt;code&gt;do...end&lt;/code&gt; syntax will always bind to the invocation.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;toc_1&#34;&gt;Further Reading&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.robertsosinski.com/2008/12/21/understanding-ruby-blocks-procs-and-lambdas/&#34;&gt;http://www.robertsosinski.com/2008/12/21/understanding-ruby-blocks-procs-and-lambdas/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/4911353/best-explanation-of-ruby-blocks&#34;&gt;http://stackoverflow.com/questions/4911353/best-explanation-of-ruby-blocks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/Loose_coupling&#34;&gt;http://en.wikipedia.org/wiki/Loose_coupling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://robsobers.com/struggle-ruby-blocks/&#34;&gt;http://robsobers.com/struggle-ruby-blocks/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jfelchner/ruby-progressbar&#34;&gt;https://github.com/jfelchner/ruby-progressbar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mindvalley/code_kata&#34;&gt;https://github.com/mindvalley/code_kata&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/parasquid/snoopka&#34;&gt;https://github.com/parasquid/snoopka&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/a/5587399&#34;&gt;http://stackoverflow.com/a/5587399&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Install ruby-2.0.0-p195 on Ubuntu 12.04</title>
      <link>http://localhost:1313/blog/2013/06/08/install-ruby-2.0.0-p195-on-ubuntu-12.04/</link>
      <pubDate>Sat, 08 Jun 2013 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/blog/2013/06/08/install-ruby-2.0.0-p195-on-ubuntu-12.04/</guid>
      <description>&lt;p&gt;It&amp;rsquo;s always easier to deal with a ruby binary that&amp;rsquo;s installed server-wide rather than a local user installation (done via &lt;a href=&#34;http://rvm.io/&#34;&gt;rvm&lt;/a&gt; or &lt;a href=&#34;http://rbenv.org/&#34;&gt;rbenv&lt;/a&gt;). Server initialization scripts don&amp;rsquo;t need to do path magic and profile sourcing in order to find the correct binary. Here I how to install ruby-2.0.0-p195 in a way that your system administrator will love you for.&lt;/p&gt;

&lt;p&gt;System administrators maintain their servers like they would maintain a well-tended garden: clean, organized, and everything in its place. It&amp;rsquo;s no surprise then that when we developers start compiling &amp;ldquo;stuff&amp;rdquo; left and right, our sysadmins get annoyed out of their minds.&lt;/p&gt;

&lt;p&gt;There is a common ground though, and that&amp;rsquo;s through using &lt;a href=&#34;https://help.ubuntu.com/community/CheckInstall&#34;&gt;checkinstall&lt;/a&gt;. This allows us to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;compile the ruby binary that we want (even the latest and greatest)&lt;/li&gt;
&lt;li&gt;allow the sysadmin to remove the package using the distro&amp;rsquo;s package manager&lt;/li&gt;
&lt;li&gt;allows a &amp;ldquo;one-build-multiple-deploy&amp;rdquo; scenario where the binary used for a server can simply be copied over and installed at a similarly configured server (think staging to production deploys)&lt;/li&gt;
&lt;li&gt;simplifies &lt;code&gt;init.d&lt;/code&gt; and other capistrano tasks by not having to remember to source the correct &lt;code&gt;.profile&lt;/code&gt; to find the correct ruby binary&lt;/li&gt;
&lt;li&gt;sidesteps the &lt;code&gt;rvm&lt;/code&gt; vs &lt;code&gt;rbenv&lt;/code&gt; argument by allowing the developers to choose whatever they want to use on their local, but the ruby version is standardized in production&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For the impatient, it&amp;rsquo;s as easy as copy-pasting this line in your terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -Lo- https://gist.github.com/parasquid/5624732/raw/install-ruby-2-ubuntu.sh | bash
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;info warning&#34; data-title=&#34;Caveat&#34;&gt;
  &lt;p&gt;My preferred deployment environment uses passwordless login through SSH keys; you might need to run this script as root. Your mileage may vary depending on how different your environment is from mine.&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;This may not work on situations where a single server will need to host multiple ruby versions. In that case, you&amp;rsquo;d definitely need a ruby versioning manager such as &lt;code&gt;rvm&lt;/code&gt; or &lt;code&gt;rbenv&lt;/code&gt;. But if you don&amp;rsquo;t need to support multiple ruby versions in one server, simplify your life (and save your sysadmin&amp;rsquo;s sanity) by using a ruby binary that&amp;rsquo;s installed server-wide through checkinstall.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the whole script:&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/5624732.js?file=install-ruby-2-ubuntu.sh&#34; type=&#34;text/javascript&#34;&gt;&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>Rolling Restarts with Capistrano and Linode</title>
      <link>http://localhost:1313/blog/2013/06/01/rolling-restarts-with-capistrano-and-linode/</link>
      <pubDate>Sat, 01 Jun 2013 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/blog/2013/06/01/rolling-restarts-with-capistrano-and-linode/</guid>
      <description>&lt;p&gt;Here I show how to perform a rolling restart using Capistrano, and making sure that the load balancer (in this case Linode) properly reroutes traffic to the still-running servers while the others are being restarted.&lt;/p&gt;

&lt;div class=&#34;info warning&#34; data-title=&#34;WARNING&#34;&gt;
  &lt;p&gt;I&amp;rsquo;m still ironing out a few bugs for the rolling deployments. The issue appears to be that Capistrano executes &lt;code&gt;deploy:create_symlink&lt;/code&gt; in parallel so the apps still experience downtime before the restart happens. The concept itself is sound but the code is not yet production ready!!&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;It is generally recommended in high-availability setups (usually with a cluster of machines behind a proxy or a load balancer) to perform a rolling restart of the services. Restarting all of your services at the same time will generally cause downtime for your users, and depending on your use case this situation is not very desirable.&lt;/p&gt;

&lt;p&gt;However, Capistrano by default runs tasks in parallel and it mostly isn&amp;rsquo;t obvious how to perform capistrano tasks serially with all of your hosts. Furthermore, communication with the load balancer during the restart is vital to proactively stop incoming connections to the application server being restarted.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/deploy.rb
namespace :deploy do
  task :restart, :roles =&amp;gt; :app, except: { no_release: true } do
    if self.roles[:app].count == 1
      run &amp;quot;/etc/init.d/rainbows_#{application} restart&amp;quot;
    else
      self.roles[:app].each do |host|
        # execute a rolling restart
        address = &amp;quot;#{host.options[:private_ip]}:80&amp;quot;
        label = &#39;NodebalancerConfiguration&#39;
        api = LinodeApi.new

        puts &amp;quot;rejecting connections for #{address}&amp;quot;
        api.reject_connections_from_node_with_label_and_address(label, address)

        puts &amp;quot;performing restart&amp;quot;
        run &amp;quot;/etc/init.d/rainbows_#{application} restart&amp;quot;, hosts: host

        puts &amp;quot;accepting connections for #{address}&amp;quot;
        api.accept_connections_from_node_with_label_and_address(label, address)

        puts &amp;quot;sleeping for 90 seconds to allow for status propagation&amp;quot;
        sleep(90)
      end
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/deploy/production.rb
server &#39;10.0.0.2&#39;, :web, :app, private_ip: &#39;192.168.0.1&#39;
server &#39;10.0.0.3&#39;, :web, :app, private_ip: &#39;192.168.0.2&#39;
server &#39;10.0.0.4&#39;, :web, :app, private_ip: &#39;192.168.0.3&#39;
server &#39;10.0.0.5&#39;, :db, no_release: true, primary: true
set :port, 20022
set :server_name, &#39;your.domain.com&#39;
set :branch, &#39;production&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# lib/linode_api.rb
class LinodeApi
  require &#39;linode&#39;
  LINODE_API_KEY =  ENV[&#39;LINODE_API_KEY&#39;]
  def initialize
    @l = Linode.new(api_key: LINODE_API_KEY)
  end

  def first_nodebalancer_id_with_label(label)
    @l.nodebalancer.list.select{|n| n.label == label}.first.nodebalancerid
  end

  def first_config_id_with_label(label)
    nodebalancer_id = first_nodebalancer_id_with_label(label)
    @l.nodebalancer.config.list(:NODEBALANCERID =&amp;gt; nodebalancer_id).first.configid
  end

  def first_node_id_with_label_and_address(label, address)
    config_id = first_config_id_with_label(label)
    @l.nodebalancer.node.list(:ConfigID =&amp;gt; config_id).select{|n| n.address == address}.first.nodeid
  end

  def reject_connections_from_node_with_label_and_address(label, address)
    node_id = first_node_id_with_label_and_address(label, address)
    @l.nodebalancer.node.update(:NodeID =&amp;gt; node_id, :Mode =&amp;gt; &#39;reject&#39;)
  end

  def accept_connections_from_node_with_label_and_address(label, address)
    node_id = first_node_id_with_label_and_address(label, address)
    @l.nodebalancer.node.update(:NodeID =&amp;gt; node_id, :Mode =&amp;gt; &#39;accept&#39;)
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Gemfile
group :development do
  gem &#39;capistrano&#39;
  gem &#39;capistrano-ext&#39;
  gem &#39;linode&#39;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linode.com/api/nodebalancer&#34;&gt;https://www.linode.com/api/nodebalancer&lt;/a&gt; - documentation for the linode nodebalancer api&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rick/linode&#34;&gt;https://github.com/rick/linode&lt;/a&gt; - linode gem that wraps the linode api&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The default &lt;a href=&#34;http://capitate.rubyforge.org/recipes/deploy.html#deploy:restart&#34;&gt;capistrano deploy:restart&lt;/a&gt; recipe is a &lt;a href=&#34;https://github.com/capistrano/capistrano/blob/master/lib/capistrano/recipes/deploy.rb#L357&#34;&gt;blank task&lt;/a&gt; that you have to override depending on your application server&amp;rsquo;s needs. For example, Passenger users would need to &lt;code&gt;touch tmp/restart.txt&lt;/code&gt; and in my case, I have a custom &lt;code&gt;init.d&lt;/code&gt; script that I can call to restart my application.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s walk through the deployment recipe.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;if self.roles[:app].count == 1
  run &amp;quot;/etc/init.d/rainbows_#{application} restart&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;self.roles&lt;/code&gt; hash contains the different &lt;a href=&#34;http://stackoverflow.com/questions/1155218/what-exactly-is-a-role-in-capistrano&#34;&gt;roles&lt;/a&gt; you have defined in your deployment file. In this case, we&amp;rsquo;re only interested in the &lt;code&gt;:app&lt;/code&gt; role (i.e. we want to limit our script to only the servers we tagged as having &lt;code&gt;:app&lt;/code&gt; role).&lt;/p&gt;

&lt;p&gt;In this case, if there is only one &lt;code&gt;:app&lt;/code&gt; defined (which usually is the case &amp;ndash; as in mine &amp;ndash; for staging servers) it makes no sense to do a rolling restarts since there is nothing to roll. There will be downtime when the single server restarts, so we might as well optimize this usecase away by calling the restart script directly.&lt;/p&gt;

&lt;p&gt;Note that this line: &lt;code&gt;run &amp;quot;/etc/init.d/rainbows_#{application} restart&amp;quot;&lt;/code&gt; when called by itself with no arguments will cause the task to run in parallel.&lt;/p&gt;

&lt;p&gt;How do you know if a task is being run in parallel? Take a look at your deployment logs:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tristan (master)$ cap production deploy
  * 2013-06-01 15:31:48 executing `production&#39;
    triggering start callbacks for `deploy&#39;
  * 2013-06-01 15:31:48 executing `multistage:ensure&#39;
  * 2013-06-01 15:31:48 executing `deploy&#39;
  * 2013-06-01 15:31:48 executing `deploy:update&#39;
 ** transaction: start
  * 2013-06-01 15:31:48 executing `deploy:update_code&#39;
    triggering before callbacks for `deploy:update_code&#39;
  * 2013-06-01 15:31:48 executing `sidekiq:quiet&#39;
  * executing multiple commands in parallel
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Capistrano will inform you that it will be executing the task in parallel (in this case, the task is &lt;code&gt;sidekiq:quiet&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;In order to deploy in serial, we have to loop through the hosts:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;else
  self.roles[:app].each do |host|
    # execute a rolling restart
    address = &amp;quot;#{host.options[:private_ip]}:80&amp;quot;
    label = &#39;OathkeeperTest&#39;
    api = LinodeApi.new

    puts &amp;quot;rejecting connections for #{address}&amp;quot;
    api.reject_connections_from_node_with_label_and_address(label, address)

    puts &amp;quot;performing restart&amp;quot;
    run &amp;quot;/etc/init.d/rainbows_#{application} restart&amp;quot;, hosts: host

    puts &amp;quot;accepting connections for #{address}&amp;quot;
    api.accept_connections_from_node_with_label_and_address(label, address)

    puts &amp;quot;sleeping for 90 seconds to allow for status propagation&amp;quot;
    sleep(90)
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We&amp;rsquo;ll get back to the &lt;code&gt;address&lt;/code&gt; and &lt;code&gt;label&lt;/code&gt; variables later when we discuss the linode api. For now, all we need to know is that the api can update the nodebalancer configuration to reject and accept connections.&lt;/p&gt;

&lt;p&gt;Our deployment pattern then looks like this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;reject&lt;/code&gt; &lt;code&gt;-&amp;gt;&lt;/code&gt; &lt;code&gt;restart&lt;/code&gt; &lt;code&gt;-&amp;gt;&lt;/code&gt; &lt;code&gt;accept&lt;/code&gt; &lt;code&gt;-&amp;gt;&lt;/code&gt; &lt;code&gt;sleep&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then it goes on to the next server for the same cycle. This allows us to maintain application availability: before the app goes down to restart, the node balancer stops accepting connections, then will start accepting connections again after a restart. Due to the way the Linode Nodebalancer system works, updating the node to accept doesn&amp;rsquo;t begin accepting connections from users until it can verify that the host is up and able to process requests.&lt;/p&gt;

&lt;p&gt;You might notice that in the server definitions I&amp;rsquo;ve added the option &lt;code&gt;private_ip&lt;/code&gt;. When defining a host, you are able to add custom options that can be later be retrieved. That&amp;rsquo;s what we are doing in this line:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;address = &amp;quot;#{host.options[:private_ip]}:80&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Why do I need to pass in the private IP of the host? This is because in the linode api, there is no real connection between the concept of a server and an address a nodebalancer points to.&lt;/p&gt;

&lt;p&gt;Hence, we have to go in a rather round-about way to figure out which node to modify to reject/accept connections. The most reliable way I&amp;rsquo;ve found is to use the configuration label and the private IP address to locate the node configuration.&lt;/p&gt;

&lt;p&gt;You&amp;rsquo;re going to need your linode api key that can be generated in your Linode &lt;a href=&#34;https://manager.linode.com/profile/&#34;&gt;My Profile&lt;/a&gt; page. Here we set it as an environment variable as a security measure. We also use the &lt;code&gt;linode&lt;/code&gt; gem to make requests to the linode api. Lastly, we wrap the whole thing into a simple object to abstract out the nittygritty of dealing with the api.&lt;/p&gt;

&lt;p&gt;The meat of this wrapper object is contained in these methods:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def reject_connections_from_node_with_label_and_address(label, address)
  node_id = first_node_id_with_label_and_address(label, address)
  @l.nodebalancer.node.update(:NodeID =&amp;gt; node_id, :Mode =&amp;gt; &#39;reject&#39;)
end

def accept_connections_from_node_with_label_and_address(label, address)
  node_id = first_node_id_with_label_and_address(label, address)
  @l.nodebalancer.node.update(:NodeID =&amp;gt; node_id, :Mode =&amp;gt; &#39;accept&#39;)
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Given a label and an address, they will hunt down the nodebalancer configuration that matches those parameters and update it to reject or accept connections.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Running PrivatePub/Faye Standalone in Heroku for Free</title>
      <link>http://localhost:1313/blog/2013/05/25/running-privatepub/faye-standalone-in-heroku-for-free/</link>
      <pubDate>Sat, 25 May 2013 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/blog/2013/05/25/running-privatepub/faye-standalone-in-heroku-for-free/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/ryanb/private_pub&#34;&gt;PrivatePub&lt;/a&gt; is an awesome gem by the renowned Ryan Bates of &lt;a href=&#34;http://railscasts.com/&#34;&gt;Railscast&lt;/a&gt; fame. It provides an easy way to use Faye as a pubsub provider. Watch this &lt;a href=&#34;http://railscasts.com/episodes/316-private-pub&#34;&gt;episode&lt;/a&gt; to see it in action.&lt;/p&gt;

&lt;p&gt;You don&amp;rsquo;t have to bundle the gem with a Rails application though; you can deploy PrivatePub standalone as a rack application in Heroku. This allows you to run PrivatePub in a web dyno instead of a worker, allowing for easier maintenance (separation of repositories/codebases) and as a side effect, save on hosting costs.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.heroku.com/&#34;&gt;Heroku&lt;/a&gt; is well known in the Ruby and Rails community for being the top-of-the-mind platform when it comes to cloud hosting. One of the biggest benefits of Heroku for developers is that they provide &amp;ndash; per application &amp;ndash; your &lt;a href=&#34;https://devcenter.heroku.com/categories/billing&#34;&gt;first web dyno&lt;/a&gt; for free. It&amp;rsquo;s great for trying out new ideas and services without having to shell out money for a hosting provider.&lt;/p&gt;

&lt;p&gt;Heroku supports a &lt;a href=&#34;https://devcenter.heroku.com/categories/language-support&#34;&gt;number of languages&lt;/a&gt; (including Ruby) and a number of deployment options. What we&amp;rsquo;re interested here is the &lt;a href=&#34;https://devcenter.heroku.com/articles/ruby-support#rack-applications&#34;&gt;Rack application depoyment&lt;/a&gt; capbility.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config.ru
# Run with: rackup private_pub.ru -s thin -E production
require &amp;quot;bundler/setup&amp;quot;
require &amp;quot;yaml&amp;quot;
require &amp;quot;faye&amp;quot;
require &amp;quot;private_pub&amp;quot;

Faye::WebSocket.load_adapter(&#39;thin&#39;)

PrivatePub.load_config(
  File.expand_path(
    &amp;quot;../config/private_pub.yml&amp;quot;, __FILE__
  ), &#39;production&#39;
)
run PrivatePub.faye_app
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# config/private_pub.yml
development:
  server: &amp;quot;http://localhost:9292/faye&amp;quot;
  secret_token: &amp;quot;secret&amp;quot;
test:
  server: &amp;quot;http://localhost:9292/faye&amp;quot;
  secret_token: &amp;quot;secret&amp;quot;
production:
  server: &amp;quot;http://example.com/faye&amp;quot;
  secret_token: &amp;quot;secret&amp;quot;
  signature_expiration: 3600 # one hour
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Gemfile
source &#39;https://rubygems.org&#39;
ruby &amp;quot;2.0.0&amp;quot;

gem &#39;faye&#39;
gem &#39;private_pub&#39;
gem &#39;thin&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These three files are really all you need to start your PrivatePub standalone server in heroku. You&amp;rsquo;ll notice a few changes from the original instructions.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;rails g private_pub:install&lt;/code&gt; will create a &lt;code&gt;private_pub.ru&lt;/code&gt; rackup file in your app folder. Since heroku by default will define a web process type at deploy time with the following parameters:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;web: bundle exec thin start -R config.ru -e $RACK_ENV -p $PORT
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I simply renamed the file to &lt;code&gt;config.ru&lt;/code&gt;. You don&amp;rsquo;t need the rest of the Rails application to run PrivatePub (but you still need Rails to use the client portions).&lt;/p&gt;

&lt;p&gt;One caveat: Rack and Faye doesn&amp;rsquo;t play well with &lt;a href=&#34;https://github.com/faye/faye/issues/25#issuecomment-375678&#34;&gt;running the server in development mode&lt;/a&gt;. So if you&amp;rsquo;re developing locally, you&amp;rsquo;d need to make sure you pass in &lt;code&gt;-E production&lt;/code&gt; to thin. You&amp;rsquo;d also most likely need to copy the same &lt;code&gt;secret_token&lt;/code&gt; for the &lt;code&gt;development&lt;/code&gt; and &lt;code&gt;production&lt;/code&gt; environments.&lt;/p&gt;

&lt;p&gt;The second line of the &lt;code&gt;Gemfile&lt;/code&gt; is a &lt;code&gt;bundler&lt;/code&gt; directive only available in version 1.2.0 and above. This is used by &lt;a href=&#34;https://devcenter.heroku.com/articles/ruby-versions&#34;&gt;Heroku&lt;/a&gt; (and even by &lt;a href=&#34;https://github.com/wayneeseguin/rvm/issues/1517#issuecomment-15007730&#34;&gt;rvm&lt;/a&gt;) to select the ruby version they will use for your environment. I prefer to make sure my deployment target mimics my development environment as much as possible so I throw that in there.&lt;/p&gt;

&lt;p&gt;Another caveat: Heroku does not support WebSockets yet, so Faye will fallback to long-polling. This may or may not be a deal breaker, as this is in fact a desirable behavior &amp;ndash; long-polling ensures that your application is supported even by not-so-current browsers.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Smartphone is not a Phone</title>
      <link>http://localhost:1313/blog/2013/02/12/a-smartphone-is-not-a-phone/</link>
      <pubDate>Tue, 12 Feb 2013 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/blog/2013/02/12/a-smartphone-is-not-a-phone/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve seen a number of commenters (mostly from the US) arguing that people look funny holding a 5-inch phone/tablet at the side of their heads, while being surprised at how well they&amp;rsquo;ve sold so far (especially in Asia).&lt;/p&gt;

&lt;p&gt;I think it&amp;rsquo;s because those that got these &amp;ldquo;giant phones&amp;rdquo; have subconsciously realised the obvious: their smart phone isn&amp;rsquo;t a phone. It&amp;rsquo;s actually a computer that happens to have phone-like functionalities. After all, the only difference Skype has over regular cellular voice services is the medium.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m guessing all these customers have performed a cost-benefit analysis in their heads during purchase (cost of looking stupid during phone calls vs amount of time making phone calls, and the benefit of having extra screen space vs amount of time on activities that benefit from that screen space e.g. email, SMS, games, videos)&lt;/p&gt;

&lt;p&gt;When you start looking at the whole situation from this perspective, it all makes sense.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Writing History on Your Own Terms</title>
      <link>http://localhost:1313/blog/2013/02/05/writing-history-on-your-own-terms/</link>
      <pubDate>Tue, 05 Feb 2013 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/blog/2013/02/05/writing-history-on-your-own-terms/</guid>
      <description>&lt;p&gt;HTC just posted a brilliant blog entry titled &amp;ldquo;&lt;a href=&#34;http://blog.htc.com/2013/02/a-brief-history-of-photography/&#34;&gt;A Brief History of Photography&lt;/a&gt;.&amp;rdquo; It&amp;rsquo;s a short infographic that details the experience of photographic technology from two centuries ago until the present.&lt;/p&gt;

&lt;p&gt;What&amp;rsquo;s really clever is that they&amp;rsquo;ve inserted themselves in history. The message is subtle yet clear: HTC will become part of this particular retelling of history.&lt;/p&gt;

&lt;p&gt;Maybe your product isn&amp;rsquo;t that well known enough to be included in the &lt;strong&gt;History of Mankind&lt;/strong&gt;, or even the &lt;strong&gt;History of &lt;em&gt;insert country here&lt;/em&gt;,&lt;/strong&gt; but is there a niche or genre where you are history in the making?&lt;/p&gt;

&lt;p&gt;The challenge then is finding out which niche or genre that is, and making sure the mark you leave behind is indelible, (enough that people will take the history you&amp;rsquo;re making as the canonical one) cementing your place in the timeline.&lt;/p&gt;

&lt;p&gt;You or your product may not be around forever, but the history you&amp;rsquo;ve contributed to is an inexpensive path to immortality.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>My Development Setup</title>
      <link>http://localhost:1313/blog/2012/01/23/my-development-setup/</link>
      <pubDate>Mon, 23 Jan 2012 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/blog/2012/01/23/my-development-setup/</guid>
      <description>

&lt;p&gt;At &lt;a href=&#34;http://www.mindvalley.com/&#34;&gt;Mindvalley&lt;/a&gt; employees can have any kind of hardware/software they want, provided that they can prove it is necessary for the work they’re doing, or at least it increases their productivity. In my case, I opted for the setup as seen here (picture courtesy of my colleague):&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://instagr.am/p/h_EQp/&#34;&gt;&lt;img src=&#34;http://distilleryimage1.s3.amazonaws.com/8bd5621a40f411e180c9123138016265_7.jpg&#34; alt=&#34;Look, Ma! Four eyes!!&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(the blank monitor on the left was an Ubuntu VM on screensaver mode)&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;A Brief History of my Development Machines&lt;/h2&gt;

&lt;p&gt;Before I describe the whole setup, allow me to provide a bit of a backgrounder. Vishen – Mindvalley’s CEO – has decreed that every employee be issued a Mac, be it a MacBook/MacBook Pro/MacBook Air/Mac Pro (yes, we have four of those). Only in special cases does the company get anything other than a Mac. Not only are employees to be A-players, they have to be cool and look cool as well :)&lt;/p&gt;

&lt;p&gt;Before my setup, I used to use a MacBook Air 2010 for development (and before that, a MacBook Pro 2010). The only person in the company that uses something other than a mac is Calvin (he runs Linux on a Dell XPS laptop). All’s well and good, but then when Mindvalley experienced a renaissance and shifted from merely being an internet marketing company into a internet services company, Calvin and I realized that our current workhorses are insufficient for the kind of work we will be doing.&lt;/p&gt;

&lt;p&gt;And so we went about trying to get a quote for some hardware. I preferred the Mac type of environment (I loved my MacBook Air) so I thought maybe I’d get the newer MacBook Pro 2011. Calvin, of course isn’t restricted to Apple hardware since he prefers to develop on Linux anyway. That was well and good, but I when it was time to do the requisition email, I noticed that my machine was waaaay pricier than his, and I had lower specs. It was then that I had an idea.&lt;/p&gt;

&lt;p&gt;“What if,” I thought to myself, “I can convince Vishen to get me a fast non-Apple desktop computer to save on price, then install Macintosh on it to somewhat retain the standard?” Long story short, I got my hackintosh (my very first, and it was quite an adventure making it). I have a sweet machine and I don’t have to unlearn and relearn my way through the OS.&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;The Pivot&lt;/h2&gt;

&lt;p&gt;Fast forward to a lazy Friday afternoon when the Apple software updater prompted me to install a few software updates. I’ve been working with Macs for so long that it was second nature to me to install software updates without thinking about it. Needless to say, during my next reboot, my Mac sputtered during the boot sequence.&lt;/p&gt;

&lt;p&gt;Now before all this, when I first started my foray into the forbidden world of Hackintoshes, I thought to myself that it would be such a waste if I couldn’t play any of the nice games on my machine. So I installed Windows 7 as a dual-boot option (we had a few unused licenses lying around). It was fortunate that I had this setup, because when the Mac OS refused to boot, I was still able to do basic stuff (like email and skype and some cloud-related tasks – thank you Google Docs!) with the Windows portion.&lt;/p&gt;

&lt;p&gt;One lucky side effect of being in Windows was that I can actually use both the discrete graphics card and the onboard graphics processor at the same time - giving me the ability to use four monitors concurrently. I wasn’t able to do that with the Hackintosh; I was limited to just two screens (three if I use a DVI-USB adapter but the screen refresh on that monitor is too low for comfort). I realized that maybe I might enjoy this nice side effect, if only I can get a decent development environment set up.&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Making it Work&lt;/h2&gt;

&lt;p&gt;Everyone knows that Windows isn’t the best environment to do web development. There are lots of things that I missed when I was in a unix-like environment like that with the Mac – a sane terminal and shell, development headers, web servers, and generally a dev environment that is close to that in production.&lt;/p&gt;

&lt;p&gt;What would be the best way to have such an environment? Make one in a virtual machine of course.&lt;/p&gt;

&lt;p&gt;I installed Ubuntu 10.04 in VirtualBox (we use 10.04 in production as well, so that’s perfect because when I deploy I know I can mimic the same packages I’ve been using). In order to access the vm, I also installed cygwin (but I mostly just use the ssh cygwin provides). That solves the issue of the shell – I have bash inside screen and I get the benefits of multiplexing and tab completion – but still I’m stuck with the horrible terminal. So I also got XMing and ran gnome-terminal off the XServer. Bit by bit I’m getting the benefits of a Unix environment – almost there.&lt;/p&gt;

&lt;p&gt;My editor of choice is NetBeans (I’ll explain why in a future post) and I’d prefer to run it inside Windows - running NetBeans inside Ubuntu isn’t that pretty and is pretty clunky with copy-paste. I thought I’d just be able to use VirtualBox’s shared folder capabilities, but when I tried that I realized that the Windows filesystem doesn’t respect the file permissions – all files become 777. In order to preserve the file permissions while still being able to run my editor natively (outside the VM) I used &lt;a href=&#34;http://www.expandrive.com/&#34;&gt;ExpanDrive&lt;/a&gt; to mount my VM’s filesystem through SSH. It’s $40 well spent – I tried using some free ssh filesystem software like &lt;a href=&#34;http://dokan-dev.net/en/&#34;&gt;Dokan&lt;/a&gt; but wasn’t able to make it work.&lt;/p&gt;

&lt;p&gt;To wrap things up, I used port forwarding to expose port 3000 and port 80 from the guest to the host. That way, I can run the servers from Ubuntu while still being able to access them from a native browser. Take note that Webrick is slow when run this way – you’d need to disable reverse lookups as seen in this &lt;a href=&#34;https://gist.github.com/1524036&#34;&gt;gist&lt;/a&gt; to speed it up, or just use thin.&lt;/p&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;I think the setup is pretty sweet, and I have no complaints so far (aside from having to relearn my shortcut keys). I have a Windows machine that I don’t have to reboot for gaming, and I’m able to have a development environment very close to what we have on our production machines.&lt;/p&gt;

&lt;p&gt;The ability to use four monitors was also very productive. I have NetBeans running on the left most monitor, the middle left monitor is for my terminal (with shells being multiplexed by screen), middle right is for the current site preview, and the far right is for viewing documentation. I think four screens is just right – any more and I’d be confused where to look at (maybe one more small monitor for and extra console output?)&lt;/p&gt;

&lt;p&gt;One additional advantage of this setup is that the whole thing is in files. That means when I get to upgrade my machine in the future, I don’t have to redo my environment – it’s in a VM so I just transplant the required files and that’s it. What I’m planning to do next is to get extra space in DropBox or &lt;a href=&#34;https://www.insynchq.com/&#34;&gt;Insync&lt;/a&gt; and put the VM image on it. I should be able to access everything from my different workstations, as long as I keep to the discipline of suspending or shutting down the VM whenever I leave.&lt;/p&gt;

&lt;p&gt;What do you think of this setup? Any suggestions how to improve on this? Would love to hear how you would solve this if you called the shots :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sticky Users</title>
      <link>http://localhost:1313/blog/2011/12/29/sticky-users/</link>
      <pubDate>Thu, 29 Dec 2011 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/blog/2011/12/29/sticky-users/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.facebook.com/groups/webcamp/341435632535194/&#34;&gt;Someone&lt;/a&gt; at WebcampKL asked for help with regard to his mobile budgeting app. Initially the discussion was about validating assumptions, but later on an important issue was raised: why would someone want to use your app, and what would make the user come back for more?&lt;/p&gt;

&lt;p&gt;There is, in fact a very simple way to get your users sticking by the your product during alpha without alienating them later on when you are ready for launch: make them pay a token amount, and once your product gets gold, waive their fees (for life, if it’s a subscription). Why does this work?&lt;/p&gt;

&lt;p&gt;There are many subtle psychological triggers in effect here, but the most powerful would be the &lt;a href=&#34;http://youarenotsosmart.com/2011/03/25/the-sunk-cost-fallacy/&#34;&gt;Sunk Cost fallacy&lt;/a&gt;. Asking them to pay even just a token amount (my suggestion was $1) is powerful enough to make them want to continue using your app and forgive its faults. This is also very similar to &lt;a href=&#34;http://www.fripp.com/art.of_influence.html&#34;&gt;Cialdini’s Commitment and Consistency&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Somewhat related would be the &lt;a href=&#34;http://youarenotsosmart.com/2010/07/27/anchoring-effect/&#34;&gt;Anchoring effect&lt;/a&gt;. By not making the alpha release free for testers, current and future customers are now used to expecting that the app is not for free. When the product launches, future customers are more likely to pay for the usage of the app.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>